{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Desktop\\\\SUCCESSFUL PROJECTS\\\\Jora mall\\\\frontend\\\\client\\\\src\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// client/src/AuthContext.js\nimport React, { useState, useEffect, useCallback, createContext, useContext } from 'react';\n\n// Create and EXPORT Auth Context to be consumed by other components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext(null);\n\n// Auth Provider component that wraps your application and provides global state\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  // State for the authenticated user data\n  const [user, setUser] = useState(null);\n  // State for the JWT authentication token\n  const [token, setToken] = useState(null);\n  // State for the local cart (used when user is not authenticated)\n  const [localCart, setLocalCart] = useState([]);\n  // State for the server cart (used when user is authenticated)\n  const [serverCart, setServerCart] = useState({\n    items: [],\n    totalAmount: 0\n  });\n\n  // --- IMPORTANT: This URL is for your DEPLOYED backend ---\n  // If you redeploy your backend and its URL changes, you MUST update it here.\n  const backendBaseUrl = 'https://jora-mall-backend.onrender.com';\n\n  // Custom modal function to display messages to the user.\n  // Now accepts an optional `autoDismissDuration` (in ms) to make it disappear automatically.\n  const showCustomModal = useCallback((message, onConfirm = () => {}, autoDismissDuration = 0) => {\n    // Remove any existing modals to prevent stacking\n    const existingModal = document.getElementById('custom-modal-container');\n    if (existingModal) {\n      document.body.removeChild(existingModal);\n    }\n\n    // Create the modal container element\n    const modalElement = document.createElement('div');\n    modalElement.id = 'custom-modal-container'; // Assign an ID for easy removal\n    modalElement.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';\n    let modalContentHtml = `\n      <div class=\"bg-white p-6 rounded-lg shadow-xl text-gray-800 max-w-sm w-full mx-4 text-center\">\n        <p class=\"text-lg font-semibold mb-4\">${message}</p>\n    `;\n\n    // Only add an \"OK\" button if autoDismissDuration is 0 (i.e., manual dismissal)\n    if (autoDismissDuration === 0) {\n      modalContentHtml += `\n        <button id=\"modal-confirm-btn\" class=\"bg-blue-600 text-white px-5 py-2 rounded-md hover:bg-blue-700 transition-colors\">OK</button>\n      `;\n    }\n    modalContentHtml += `</div>`;\n    modalElement.innerHTML = modalContentHtml;\n\n    // Append the modal to the document body\n    document.body.appendChild(modalElement);\n\n    // If autoDismissDuration is provided, set a timeout to remove the modal\n    if (autoDismissDuration > 0) {\n      setTimeout(() => {\n        if (document.body.contains(modalElement)) {\n          document.body.removeChild(modalElement);\n        }\n        onConfirm(); // Execute callback even for auto-dismissed modals\n      }, autoDismissDuration);\n    } else {\n      // If no autoDismissDuration, set up click listener for the \"OK\" button\n      const confirmBtn = modalElement.querySelector('#modal-confirm-btn');\n      if (confirmBtn) {\n        confirmBtn.addEventListener('click', () => {\n          if (document.body.contains(modalElement)) {\n            document.body.removeChild(modalElement);\n          }\n          onConfirm();\n        });\n      }\n    }\n  }, []); // Empty dependency array means this function definition is stable and won't change\n\n  // Effect to load initial state from localStorage when the component mounts\n  useEffect(() => {\n    const storedToken = localStorage.getItem('token');\n    const storedUser = localStorage.getItem('user');\n    const storedLocalCart = localStorage.getItem('localCart');\n\n    // Restore user and token if found in localStorage\n    if (storedToken && storedUser) {\n      try {\n        setUser(JSON.parse(storedUser));\n        setToken(storedToken);\n      } catch (e) {\n        console.error(\"AuthContext: Failed to parse stored user data from localStorage\", e);\n        // Clear corrupted data to prevent future errors\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n      }\n    }\n    // Restore local cart if found in localStorage\n    if (storedLocalCart) {\n      try {\n        // Ensure the parsed data is an array before setting\n        const parsedCart = JSON.parse(storedLocalCart);\n        if (Array.isArray(parsedCart)) {\n          setLocalCart(parsedCart);\n        } else {\n          console.warn(\"AuthContext: Stored local cart was not an array, clearing.\");\n          localStorage.removeItem('localCart');\n        }\n      } catch (e) {\n        console.error(\"AuthContext: Failed to parse stored local cart data from localStorage\", e);\n        // Clear corrupted data\n        localStorage.removeItem('localCart');\n      }\n    }\n  }, []); // Runs only once on component mount\n\n  // Effect to synchronize the local cart state with localStorage whenever it changes\n  useEffect(() => {\n    // Only save if localCart is actually an array (to prevent saving initial null/undefined states)\n    if (Array.isArray(localCart)) {\n      localStorage.setItem('localCart', JSON.stringify(localCart));\n    }\n  }, [localCart]); // Re-runs whenever localCart state changes\n\n  // Function to fetch the authenticated user's cart from the backend server\n  const fetchServerCart = useCallback(async authToken => {\n    // If no auth token is provided, clear server cart and return\n    if (!authToken) {\n      setServerCart({\n        items: [],\n        totalAmount: 0\n      });\n      return;\n    }\n    console.log('AuthContext fetchServerCart: Attempting to fetch cart with token.');\n    try {\n      const response = await fetch(`${backendBaseUrl}/api/cart`, {\n        // Using deployed backend URL\n        headers: {\n          'Authorization': `Bearer ${authToken}` // Include JWT token for authentication\n        }\n      });\n      if (!response.ok) {\n        // If the response is 401 (Unauthorized), it means the token is invalid or expired\n        if (response.status === 401) {\n          console.warn('AuthContext fetchServerCart: Token invalid/expired, forcing logout.');\n          // Show a modal and then log out the user after they acknowledge\n          showCustomModal('Your session has expired. Please log in again.', () => {\n            logout(); // Calls the logout function defined below\n          });\n        }\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('AuthContext fetchServerCart: Server cart fetched successfully.', data);\n      setServerCart(data); // Update server cart state\n      // After successfully fetching server cart, clear the local cart\n      setLocalCart([]);\n      localStorage.removeItem('localCart'); // Also remove from localStorage\n    } catch (error) {\n      console.error('AuthContext fetchServerCart: Error fetching cart:', error);\n      // Fallback to an empty server cart on error\n      setServerCart({\n        items: [],\n        totalAmount: 0\n      });\n    }\n  }, [showCustomModal, backendBaseUrl]); // Dependency: backendBaseUrl added\n\n  // Function to merge items from the local (guest) cart into the authenticated user's server cart\n  const mergeLocalCartWithServer = useCallback(async authToken => {\n    // Only proceed if there are items in the local cart and a token is available\n    if (localCart.length === 0 || !authToken) return;\n    try {\n      console.log('AuthContext mergeLocalCartWithServer: Attempting to merge local cart with server cart...');\n      // Loop through each item in the local cart\n      for (const item of localCart) {\n        // Send a POST request to the cart API to add each item\n        // The backend should handle updating quantity if the item already exists\n        const response = await fetch(`${backendBaseUrl}/api/cart`, {\n          // Using deployed backend URL\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${authToken}`\n          },\n          body: JSON.stringify({\n            productId: item.product,\n            quantity: item.quantity\n          })\n        });\n        if (!response.ok) {\n          const errorData = await response.json();\n          // Log specific errors for each item without stopping the loop\n          console.error(`AuthContext mergeLocalCartWithServer: Error merging item ${item.name}:`, errorData.message || response.status);\n        }\n      }\n      // Notify user about successful merge using auto-dismiss modal\n      showCustomModal('Your guest cart has been merged with your account!', () => {}, 3000); // Auto-dismiss after 3 seconds\n      // Clear local cart and its localStorage entry after all items have been processed\n      setLocalCart([]);\n      localStorage.removeItem('localCart');\n      // Re-fetch the server cart to ensure the frontend reflects the fully merged cart\n      fetchServerCart(authToken);\n    } catch (error) {\n      console.error('AuthContext mergeLocalCartWithServer: Error during cart merge process:', error);\n      showCustomModal('There was an issue merging your guest cart.'); // This one should still require OK click\n    }\n  }, [localCart, fetchServerCart, showCustomModal, backendBaseUrl]); // Dependencies: backendBaseUrl added\n\n  // Function to fetch the user's wallet balance from the backend\n  const fetchWalletBalance = useCallback(async authToken => {\n    if (!authToken) {\n      // If no token, user is not logged in, so wallet balance is 0\n      setUser(prevUser => prevUser ? {\n        ...prevUser,\n        walletBalance: 0\n      } : null);\n      return;\n    }\n    try {\n      const response = await fetch(`${backendBaseUrl}/api/wallet/balance`, {\n        headers: {\n          'Authorization': `Bearer ${authToken}`\n        }\n      });\n      if (!response.ok) {\n        // If 401, session expired. Handle via logout in fetchServerCart or similar.\n        // For now, just log and set balance to 0.\n        console.error('Failed to fetch wallet balance:', response.status);\n        setUser(prevUser => prevUser ? {\n          ...prevUser,\n          walletBalance: 0\n        } : null);\n        return;\n      }\n      const data = await response.json();\n      // Update the user state with the new wallet balance\n      setUser(prevUser => ({\n        ...prevUser,\n        walletBalance: data.walletBalance\n      }));\n    } catch (error) {\n      console.error('Error fetching wallet balance:', error);\n      setUser(prevUser => prevUser ? {\n        ...prevUser,\n        walletBalance: 0\n      } : null); // Set to 0 on error\n    }\n  }, [backendBaseUrl]); // Dependency: backendBaseUrl added\n\n  // Effect to manage fetching server cart, merging local cart, and fetching wallet balance\n  // whenever the `token` changes (i.e., on login/logout)\n  useEffect(() => {\n    console.log('AuthProvider useEffect: Token changed. Re-fetching server cart, potentially merging local cart, and fetching wallet balance.');\n    if (token) {\n      fetchServerCart(token);\n      mergeLocalCartWithServer(token);\n      fetchWalletBalance(token); // Fetch wallet balance on login\n    } else {\n      setServerCart({\n        items: [],\n        totalAmount: 0\n      }); // Clear server cart state\n      setUser(null); // Ensure user is null on logout\n    }\n  }, [token, fetchServerCart, mergeLocalCartWithServer, fetchWalletBalance]); // Dependencies for this effect\n\n  // Function to handle user login: sets user data and token in state and localStorage\n  const login = (userData, userToken) => {\n    setUser(userData);\n    setToken(userToken);\n    localStorage.setItem('token', userToken);\n    localStorage.setItem('user', JSON.stringify(userData));\n    console.log('AuthContext login: User logged in. Context state and localStorage updated.');\n    // Cart fetching and merging, and wallet balance fetching will be handled by the useEffect that depends on `token`\n  };\n\n  // Function to handle user logout: clears user data, token, and server cart from state and localStorage\n  const logout = () => {\n    console.log('AuthContext logout: User logging out. Clearing context state and localStorage.');\n    setUser(null);\n    setToken(null);\n    setServerCart({\n      items: [],\n      totalAmount: 0\n    }); // Clear server cart state\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    // Local cart remains for a guest shopping experience, but can be cleared if desired\n  };\n\n  // Function to add a product to the cart (smartly handles both local and server carts)\n  const addToCart = async (productId, quantity = 1, productDetails = {}) => {\n    if (!productId) {\n      showCustomModal('Cannot add to cart: Product ID is missing or invalid.');\n      console.error('AuthContext addToCart: productId is undefined or null');\n      return;\n    }\n    if (token) {\n      // If user is authenticated, add product to the server cart via API\n      try {\n        const response = await fetch(`${backendBaseUrl}/api/cart`, {\n          // Using deployed backend URL\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n          },\n          body: JSON.stringify({\n            productId,\n            quantity\n          })\n        });\n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n        }\n        const updatedCart = await response.json();\n        setServerCart(updatedCart); // Update the server cart state\n        // Use auto-dismiss modal for \"Product added to cart!\"\n        showCustomModal('Product added to cart!', () => {}, 2000); // Auto-dismiss after 2 seconds\n      } catch (error) {\n        console.error('AuthContext addToCart: Error adding to server cart:', error);\n        showCustomModal(`Failed to add to cart: ${error.message}`);\n      }\n    } else {\n      // If user is not authenticated, manage the cart locally (in memory and localStorage)\n      const existingItemIndex = localCart.findIndex(item => item.product === productId);\n      let updatedLocalCart;\n      if (existingItemIndex > -1) {\n        // If the product already exists in the local cart, update its quantity\n        updatedLocalCart = localCart.map((item, index) => index === existingItemIndex ? {\n          ...item,\n          quantity: item.quantity + quantity\n        } : item);\n      } else {\n        // If the product is new, add it to the local cart\n        // Ensure productDetails are provided for local cart display (name, imageUrl, price)\n        if (!productDetails.name || !productDetails.price) {\n          console.warn('AuthContext addToCart: Missing product details for local cart. Attempting to fetch or using defaults.');\n          try {\n            // Attempt to fetch product details if not provided to make local cart display richer\n            const res = await fetch(`${backendBaseUrl}/api/products/${productId}`); // Using deployed backend URL\n            const productData = await res.json();\n            if (res.ok) {\n              productDetails = {\n                name: productData.name,\n                imageUrl: productData.imageUrl,\n                price: productData.price\n              };\n            } else {\n              console.error('AuthContext addToCart: Failed to fetch product details for local cart:', productData.message);\n              productDetails = {\n                name: 'Unknown Product',\n                imageUrl: '',\n                price: 0\n              }; // Fallback details\n            }\n          } catch (fetchErr) {\n            console.error('AuthContext addToCart: Error fetching product details for local cart:', fetchErr);\n            productDetails = {\n              name: 'Unknown Product',\n              imageUrl: '',\n              price: 0\n            }; // Fallback details\n          }\n        }\n        updatedLocalCart = [...localCart, {\n          product: productId,\n          // Store the product ID\n          name: productDetails.name,\n          imageUrl: productDetails.imageUrl,\n          price: productDetails.price,\n          quantity: quantity\n        }];\n      }\n      setLocalCart(updatedLocalCart); // Update the local cart state\n      // Use auto-dismiss modal for \"Product added to local cart!\"\n      showCustomModal('Product added to local cart!', () => {}, 2000); // Auto-dismiss after 2 seconds\n    }\n  };\n\n  // Function to update the quantity of a specific product in the cart\n  const updateCartQuantity = async (productId, quantity) => {\n    if (quantity < 0) {\n      showCustomModal('Quantity cannot be negative.');\n      return;\n    }\n    if (token) {\n      // If authenticated, update quantity on the server via API\n      try {\n        const response = await fetch(`${backendBaseUrl}/api/cart/${productId}`, {\n          // Using deployed backend URL\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n          },\n          body: JSON.stringify({\n            quantity\n          })\n        });\n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n        }\n        const updatedCart = await response.json();\n        setServerCart(updatedCart); // Update server cart state\n      } catch (error) {\n        console.error('AuthContext updateCartQuantity: Error updating server cart quantity:', error);\n        showCustomModal(`Failed to update quantity: ${error.message}`);\n      }\n    } else {\n      // If unauthenticated, update quantity in the local cart\n      const updatedLocalCart = localCart.map(item => item.product === productId ? {\n        ...item,\n        quantity: quantity\n      } : item).filter(item => item.quantity > 0); // Remove item from local cart if quantity becomes 0\n\n      setLocalCart(updatedLocalCart); // Update local cart state\n    }\n  };\n\n  // Function to remove a specific product from the cart\n  const removeFromCart = async productId => {\n    if (token) {\n      // If authenticated, remove from server cart via API\n      try {\n        const response = await fetch(`${backendBaseUrl}/api/cart/${productId}`, {\n          // Using deployed backend URL\n          method: 'DELETE',\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n        }\n        const updatedCart = await response.json();\n        setServerCart(updatedCart); // Update server cart state\n        showCustomModal('Product removed from cart.'); // This should still require OK click\n      } catch (error) {\n        console.error('AuthContext removeFromCart: Error removing from server cart:', error);\n        showCustomModal(`Failed to remove from cart: ${error.message}`);\n      }\n    } else {\n      // If unauthenticated, remove from local cart\n      const updatedLocalCart = localCart.filter(item => item.product !== productId);\n      setLocalCart(updatedLocalCart); // Update local cart state\n      showCustomModal('Product removed from local cart.'); // This should still require OK click\n    }\n  };\n\n  // Function to clear all items from the cart\n  const clearCart = async () => {\n    if (token) {\n      // If authenticated, clear server cart via API\n      try {\n        const response = await fetch(`${backendBaseUrl}/api/cart`, {\n          // Using deployed backend URL\n          method: 'DELETE',\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n        }\n        const clearedCart = await response.json();\n        setServerCart(clearedCart); // Update server cart state to empty\n        showCustomModal('Cart cleared successfully.'); // This should still require OK click\n      } catch (error) {\n        console.error('AuthContext clearCart: Error clearing server cart:', error);\n        showCustomModal(`Failed to clear cart: ${error.message}`);\n      }\n    } else {\n      // If unauthenticated, clear local cart\n      setLocalCart([]); // Set local cart to empty array\n      showCustomModal('Local cart cleared successfully.'); // This should still require OK click\n    }\n  };\n\n  // Determine which cart to display based on authentication status\n  const currentDisplayCart = token ? serverCart : {\n    items: localCart,\n    // Calculate total amount for local cart items dynamically\n    totalAmount: localCart.reduce((acc, item) => acc + item.price * item.quantity, 0)\n  };\n\n  // The object containing all values and functions that will be exposed through the context\n  const authContextValue = {\n    user,\n    // Currently authenticated user data\n    token,\n    // JWT token\n    login,\n    // Function to log in a user\n    logout,\n    // Function to log out a user\n    cart: currentDisplayCart,\n    // The active cart (local or server)\n    addToCart,\n    // Function to add product to cart\n    updateCartQuantity,\n    // Function to update product quantity in cart\n    removeFromCart,\n    // Function to remove product from cart\n    clearCart,\n    // Function to clear the entire cart\n    fetchServerCart,\n    // Function to manually fetch server cart (internal use mostly)\n    showCustomModal,\n    // Utility function to show custom alert/confirm modals\n    fetchWalletBalance // NEW: Function to fetch wallet balance\n  };\n  return (\n    /*#__PURE__*/\n    // Provide the constructed context value to all child components\n    _jsxDEV(AuthContext.Provider, {\n      value: authContextValue,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 470,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n// Custom hook to easily consume the AuthContext in any functional component\n_s(AuthProvider, \"Kdsolm0tL9on3I3a4cxLR6WuJaU=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  // Throw an error if useAuth is used outside of an AuthProvider, helping debugging\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context; // Return the context value\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","createContext","useContext","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","token","setToken","localCart","setLocalCart","serverCart","setServerCart","items","totalAmount","backendBaseUrl","showCustomModal","message","onConfirm","autoDismissDuration","existingModal","document","getElementById","body","removeChild","modalElement","createElement","id","className","modalContentHtml","innerHTML","appendChild","setTimeout","contains","confirmBtn","querySelector","addEventListener","storedToken","localStorage","getItem","storedUser","storedLocalCart","JSON","parse","e","console","error","removeItem","parsedCart","Array","isArray","warn","setItem","stringify","fetchServerCart","authToken","log","response","fetch","headers","ok","status","logout","Error","data","json","mergeLocalCartWithServer","length","item","method","productId","product","quantity","errorData","name","fetchWalletBalance","prevUser","walletBalance","login","userData","userToken","addToCart","productDetails","updatedCart","existingItemIndex","findIndex","updatedLocalCart","map","index","price","res","productData","imageUrl","fetchErr","updateCartQuantity","filter","removeFromCart","clearCart","clearedCart","currentDisplayCart","reduce","acc","authContextValue","cart","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","undefined","$RefreshReg$"],"sources":["C:/Users/HP/OneDrive/Desktop/SUCCESSFUL PROJECTS/Jora mall/frontend/client/src/AuthContext.js"],"sourcesContent":["// client/src/AuthContext.js\r\nimport React, { useState, useEffect, useCallback, createContext, useContext } from 'react';\r\n\r\n// Create and EXPORT Auth Context to be consumed by other components\r\nexport const AuthContext = createContext(null);\r\n\r\n// Auth Provider component that wraps your application and provides global state\r\nexport function AuthProvider({ children }) {\r\n  // State for the authenticated user data\r\n  const [user, setUser] = useState(null);\r\n  // State for the JWT authentication token\r\n  const [token, setToken] = useState(null);\r\n  // State for the local cart (used when user is not authenticated)\r\n  const [localCart, setLocalCart] = useState([]);\r\n  // State for the server cart (used when user is authenticated)\r\n  const [serverCart, setServerCart] = useState({ items: [], totalAmount: 0 });\r\n\r\n  // --- IMPORTANT: This URL is for your DEPLOYED backend ---\r\n  // If you redeploy your backend and its URL changes, you MUST update it here.\r\n  const backendBaseUrl = 'https://jora-mall-backend.onrender.com';\r\n\r\n  // Custom modal function to display messages to the user.\r\n  // Now accepts an optional `autoDismissDuration` (in ms) to make it disappear automatically.\r\n  const showCustomModal = useCallback((message, onConfirm = () => {}, autoDismissDuration = 0) => {\r\n    // Remove any existing modals to prevent stacking\r\n    const existingModal = document.getElementById('custom-modal-container');\r\n    if (existingModal) {\r\n      document.body.removeChild(existingModal);\r\n    }\r\n\r\n    // Create the modal container element\r\n    const modalElement = document.createElement('div');\r\n    modalElement.id = 'custom-modal-container'; // Assign an ID for easy removal\r\n    modalElement.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';\r\n\r\n    let modalContentHtml = `\r\n      <div class=\"bg-white p-6 rounded-lg shadow-xl text-gray-800 max-w-sm w-full mx-4 text-center\">\r\n        <p class=\"text-lg font-semibold mb-4\">${message}</p>\r\n    `;\r\n\r\n    // Only add an \"OK\" button if autoDismissDuration is 0 (i.e., manual dismissal)\r\n    if (autoDismissDuration === 0) {\r\n      modalContentHtml += `\r\n        <button id=\"modal-confirm-btn\" class=\"bg-blue-600 text-white px-5 py-2 rounded-md hover:bg-blue-700 transition-colors\">OK</button>\r\n      `;\r\n    }\r\n\r\n    modalContentHtml += `</div>`;\r\n    modalElement.innerHTML = modalContentHtml;\r\n\r\n    // Append the modal to the document body\r\n    document.body.appendChild(modalElement);\r\n\r\n    // If autoDismissDuration is provided, set a timeout to remove the modal\r\n    if (autoDismissDuration > 0) {\r\n      setTimeout(() => {\r\n        if (document.body.contains(modalElement)) {\r\n          document.body.removeChild(modalElement);\r\n        }\r\n        onConfirm(); // Execute callback even for auto-dismissed modals\r\n      }, autoDismissDuration);\r\n    } else {\r\n      // If no autoDismissDuration, set up click listener for the \"OK\" button\r\n      const confirmBtn = modalElement.querySelector('#modal-confirm-btn');\r\n      if (confirmBtn) {\r\n        confirmBtn.addEventListener('click', () => {\r\n          if (document.body.contains(modalElement)) {\r\n            document.body.removeChild(modalElement);\r\n          }\r\n          onConfirm();\r\n        });\r\n      }\r\n    }\r\n  }, []); // Empty dependency array means this function definition is stable and won't change\r\n\r\n  // Effect to load initial state from localStorage when the component mounts\r\n  useEffect(() => {\r\n    const storedToken = localStorage.getItem('token');\r\n    const storedUser = localStorage.getItem('user');\r\n    const storedLocalCart = localStorage.getItem('localCart');\r\n\r\n    // Restore user and token if found in localStorage\r\n    if (storedToken && storedUser) {\r\n      try {\r\n        setUser(JSON.parse(storedUser));\r\n        setToken(storedToken);\r\n      } catch (e) {\r\n        console.error(\"AuthContext: Failed to parse stored user data from localStorage\", e);\r\n        // Clear corrupted data to prevent future errors\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('user');\r\n      }\r\n    }\r\n    // Restore local cart if found in localStorage\r\n    if (storedLocalCart) {\r\n      try {\r\n        // Ensure the parsed data is an array before setting\r\n        const parsedCart = JSON.parse(storedLocalCart);\r\n        if (Array.isArray(parsedCart)) {\r\n          setLocalCart(parsedCart);\r\n        } else {\r\n          console.warn(\"AuthContext: Stored local cart was not an array, clearing.\");\r\n          localStorage.removeItem('localCart');\r\n        }\r\n      } catch (e) {\r\n        console.error(\"AuthContext: Failed to parse stored local cart data from localStorage\", e);\r\n        // Clear corrupted data\r\n        localStorage.removeItem('localCart');\r\n      }\r\n    }\r\n  }, []); // Runs only once on component mount\r\n\r\n  // Effect to synchronize the local cart state with localStorage whenever it changes\r\n  useEffect(() => {\r\n    // Only save if localCart is actually an array (to prevent saving initial null/undefined states)\r\n    if (Array.isArray(localCart)) {\r\n      localStorage.setItem('localCart', JSON.stringify(localCart));\r\n    }\r\n  }, [localCart]); // Re-runs whenever localCart state changes\r\n\r\n  // Function to fetch the authenticated user's cart from the backend server\r\n  const fetchServerCart = useCallback(async (authToken) => {\r\n    // If no auth token is provided, clear server cart and return\r\n    if (!authToken) {\r\n      setServerCart({ items: [], totalAmount: 0 });\r\n      return;\r\n    }\r\n    console.log('AuthContext fetchServerCart: Attempting to fetch cart with token.');\r\n    try {\r\n      const response = await fetch(`${backendBaseUrl}/api/cart`, { // Using deployed backend URL\r\n        headers: {\r\n          'Authorization': `Bearer ${authToken}`, // Include JWT token for authentication\r\n        },\r\n      });\r\n      if (!response.ok) {\r\n        // If the response is 401 (Unauthorized), it means the token is invalid or expired\r\n        if (response.status === 401) {\r\n          console.warn('AuthContext fetchServerCart: Token invalid/expired, forcing logout.');\r\n          // Show a modal and then log out the user after they acknowledge\r\n          showCustomModal('Your session has expired. Please log in again.', () => {\r\n            logout(); // Calls the logout function defined below\r\n          });\r\n        }\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      const data = await response.json();\r\n      console.log('AuthContext fetchServerCart: Server cart fetched successfully.', data);\r\n      setServerCart(data); // Update server cart state\r\n      // After successfully fetching server cart, clear the local cart\r\n      setLocalCart([]);\r\n      localStorage.removeItem('localCart'); // Also remove from localStorage\r\n    } catch (error) {\r\n      console.error('AuthContext fetchServerCart: Error fetching cart:', error);\r\n      // Fallback to an empty server cart on error\r\n      setServerCart({ items: [], totalAmount: 0 });\r\n    }\r\n  }, [showCustomModal, backendBaseUrl]); // Dependency: backendBaseUrl added\r\n\r\n  // Function to merge items from the local (guest) cart into the authenticated user's server cart\r\n  const mergeLocalCartWithServer = useCallback(async (authToken) => {\r\n    // Only proceed if there are items in the local cart and a token is available\r\n    if (localCart.length === 0 || !authToken) return;\r\n\r\n    try {\r\n      console.log('AuthContext mergeLocalCartWithServer: Attempting to merge local cart with server cart...');\r\n      // Loop through each item in the local cart\r\n      for (const item of localCart) {\r\n        // Send a POST request to the cart API to add each item\r\n        // The backend should handle updating quantity if the item already exists\r\n        const response = await fetch(`${backendBaseUrl}/api/cart`, { // Using deployed backend URL\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${authToken}`,\r\n          },\r\n          body: JSON.stringify({ productId: item.product, quantity: item.quantity }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          const errorData = await response.json();\r\n          // Log specific errors for each item without stopping the loop\r\n          console.error(`AuthContext mergeLocalCartWithServer: Error merging item ${item.name}:`, errorData.message || response.status);\r\n        }\r\n      }\r\n      // Notify user about successful merge using auto-dismiss modal\r\n      showCustomModal('Your guest cart has been merged with your account!', () => {}, 3000); // Auto-dismiss after 3 seconds\r\n      // Clear local cart and its localStorage entry after all items have been processed\r\n      setLocalCart([]);\r\n      localStorage.removeItem('localCart');\r\n      // Re-fetch the server cart to ensure the frontend reflects the fully merged cart\r\n      fetchServerCart(authToken);\r\n    } catch (error) {\r\n      console.error('AuthContext mergeLocalCartWithServer: Error during cart merge process:', error);\r\n      showCustomModal('There was an issue merging your guest cart.'); // This one should still require OK click\r\n    }\r\n  }, [localCart, fetchServerCart, showCustomModal, backendBaseUrl]); // Dependencies: backendBaseUrl added\r\n\r\n  // Function to fetch the user's wallet balance from the backend\r\n  const fetchWalletBalance = useCallback(async (authToken) => {\r\n    if (!authToken) {\r\n      // If no token, user is not logged in, so wallet balance is 0\r\n      setUser(prevUser => (prevUser ? { ...prevUser, walletBalance: 0 } : null));\r\n      return;\r\n    }\r\n    try {\r\n      const response = await fetch(`${backendBaseUrl}/api/wallet/balance`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${authToken}`,\r\n        },\r\n      });\r\n      if (!response.ok) {\r\n        // If 401, session expired. Handle via logout in fetchServerCart or similar.\r\n        // For now, just log and set balance to 0.\r\n        console.error('Failed to fetch wallet balance:', response.status);\r\n        setUser(prevUser => (prevUser ? { ...prevUser, walletBalance: 0 } : null));\r\n        return;\r\n      }\r\n      const data = await response.json();\r\n      // Update the user state with the new wallet balance\r\n      setUser(prevUser => ({\r\n        ...prevUser,\r\n        walletBalance: data.walletBalance,\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error fetching wallet balance:', error);\r\n      setUser(prevUser => (prevUser ? { ...prevUser, walletBalance: 0 } : null)); // Set to 0 on error\r\n    }\r\n  }, [backendBaseUrl]); // Dependency: backendBaseUrl added\r\n\r\n  // Effect to manage fetching server cart, merging local cart, and fetching wallet balance\r\n  // whenever the `token` changes (i.e., on login/logout)\r\n  useEffect(() => {\r\n    console.log('AuthProvider useEffect: Token changed. Re-fetching server cart, potentially merging local cart, and fetching wallet balance.');\r\n    if (token) {\r\n      fetchServerCart(token);\r\n      mergeLocalCartWithServer(token);\r\n      fetchWalletBalance(token); // Fetch wallet balance on login\r\n    } else {\r\n      setServerCart({ items: [], totalAmount: 0 }); // Clear server cart state\r\n      setUser(null); // Ensure user is null on logout\r\n    }\r\n  }, [token, fetchServerCart, mergeLocalCartWithServer, fetchWalletBalance]); // Dependencies for this effect\r\n\r\n  // Function to handle user login: sets user data and token in state and localStorage\r\n  const login = (userData, userToken) => {\r\n    setUser(userData);\r\n    setToken(userToken);\r\n    localStorage.setItem('token', userToken);\r\n    localStorage.setItem('user', JSON.stringify(userData));\r\n    console.log('AuthContext login: User logged in. Context state and localStorage updated.');\r\n    // Cart fetching and merging, and wallet balance fetching will be handled by the useEffect that depends on `token`\r\n  };\r\n\r\n  // Function to handle user logout: clears user data, token, and server cart from state and localStorage\r\n  const logout = () => {\r\n    console.log('AuthContext logout: User logging out. Clearing context state and localStorage.');\r\n    setUser(null);\r\n    setToken(null);\r\n    setServerCart({ items: [], totalAmount: 0 }); // Clear server cart state\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    // Local cart remains for a guest shopping experience, but can be cleared if desired\r\n  };\r\n\r\n  // Function to add a product to the cart (smartly handles both local and server carts)\r\n  const addToCart = async (productId, quantity = 1, productDetails = {}) => {\r\n    if (!productId) {\r\n      showCustomModal('Cannot add to cart: Product ID is missing or invalid.');\r\n      console.error('AuthContext addToCart: productId is undefined or null');\r\n      return;\r\n    }\r\n\r\n    if (token) {\r\n      // If user is authenticated, add product to the server cart via API\r\n      try {\r\n        const response = await fetch(`${backendBaseUrl}/api/cart`, { // Using deployed backend URL\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${token}`,\r\n          },\r\n          body: JSON.stringify({ productId, quantity }),\r\n        });\r\n        if (!response.ok) {\r\n          const errorData = await response.json();\r\n          throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\r\n        }\r\n        const updatedCart = await response.json();\r\n        setServerCart(updatedCart); // Update the server cart state\r\n        // Use auto-dismiss modal for \"Product added to cart!\"\r\n        showCustomModal('Product added to cart!', () => {}, 2000); // Auto-dismiss after 2 seconds\r\n      } catch (error) {\r\n        console.error('AuthContext addToCart: Error adding to server cart:', error);\r\n        showCustomModal(`Failed to add to cart: ${error.message}`);\r\n      }\r\n    } else {\r\n      // If user is not authenticated, manage the cart locally (in memory and localStorage)\r\n      const existingItemIndex = localCart.findIndex(item => item.product === productId);\r\n      let updatedLocalCart;\r\n\r\n      if (existingItemIndex > -1) {\r\n        // If the product already exists in the local cart, update its quantity\r\n        updatedLocalCart = localCart.map((item, index) =>\r\n          index === existingItemIndex ? { ...item, quantity: item.quantity + quantity } : item\r\n        );\r\n      } else {\r\n        // If the product is new, add it to the local cart\r\n        // Ensure productDetails are provided for local cart display (name, imageUrl, price)\r\n        if (!productDetails.name || !productDetails.price) {\r\n          console.warn('AuthContext addToCart: Missing product details for local cart. Attempting to fetch or using defaults.');\r\n          try {\r\n            // Attempt to fetch product details if not provided to make local cart display richer\r\n            const res = await fetch(`${backendBaseUrl}/api/products/${productId}`); // Using deployed backend URL\r\n            const productData = await res.json();\r\n            if (res.ok) {\r\n              productDetails = {\r\n                name: productData.name,\r\n                imageUrl: productData.imageUrl,\r\n                price: productData.price,\r\n              };\r\n            } else {\r\n              console.error('AuthContext addToCart: Failed to fetch product details for local cart:', productData.message);\r\n              productDetails = { name: 'Unknown Product', imageUrl: '', price: 0 }; // Fallback details\r\n            }\r\n          } catch (fetchErr) {\r\n            console.error('AuthContext addToCart: Error fetching product details for local cart:', fetchErr);\r\n            productDetails = { name: 'Unknown Product', imageUrl: '', price: 0 }; // Fallback details\r\n          }\r\n        }\r\n\r\n        updatedLocalCart = [\r\n          ...localCart,\r\n          {\r\n            product: productId, // Store the product ID\r\n            name: productDetails.name,\r\n            imageUrl: productDetails.imageUrl,\r\n            price: productDetails.price,\r\n            quantity: quantity,\r\n          },\r\n        ];\r\n      }\r\n      setLocalCart(updatedLocalCart); // Update the local cart state\r\n      // Use auto-dismiss modal for \"Product added to local cart!\"\r\n      showCustomModal('Product added to local cart!', () => {}, 2000); // Auto-dismiss after 2 seconds\r\n    }\r\n  };\r\n\r\n  // Function to update the quantity of a specific product in the cart\r\n  const updateCartQuantity = async (productId, quantity) => {\r\n    if (quantity < 0) {\r\n      showCustomModal('Quantity cannot be negative.');\r\n      return;\r\n    }\r\n\r\n    if (token) {\r\n      // If authenticated, update quantity on the server via API\r\n      try {\r\n        const response = await fetch(`${backendBaseUrl}/api/cart/${productId}`, { // Using deployed backend URL\r\n          method: 'PUT',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${token}`,\r\n          },\r\n          body: JSON.stringify({ quantity }),\r\n        });\r\n        if (!response.ok) {\r\n          const errorData = await response.json();\r\n          throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\r\n        }\r\n        const updatedCart = await response.json();\r\n        setServerCart(updatedCart); // Update server cart state\r\n      } catch (error) {\r\n        console.error('AuthContext updateCartQuantity: Error updating server cart quantity:', error);\r\n        showCustomModal(`Failed to update quantity: ${error.message}`);\r\n      }\r\n    } else {\r\n      // If unauthenticated, update quantity in the local cart\r\n      const updatedLocalCart = localCart.map(item =>\r\n        item.product === productId ? { ...item, quantity: quantity } : item\r\n      ).filter(item => item.quantity > 0); // Remove item from local cart if quantity becomes 0\r\n\r\n      setLocalCart(updatedLocalCart); // Update local cart state\r\n    }\r\n  };\r\n\r\n  // Function to remove a specific product from the cart\r\n  const removeFromCart = async (productId) => {\r\n    if (token) {\r\n      // If authenticated, remove from server cart via API\r\n      try {\r\n        const response = await fetch(`${backendBaseUrl}/api/cart/${productId}`, { // Using deployed backend URL\r\n          method: 'DELETE',\r\n          headers: {\r\n            'Authorization': `Bearer ${token}`,\r\n          },\r\n        });\r\n        if (!response.ok) {\r\n          const errorData = await response.json();\r\n          throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\r\n        }\r\n        const updatedCart = await response.json();\r\n        setServerCart(updatedCart); // Update server cart state\r\n        showCustomModal('Product removed from cart.'); // This should still require OK click\r\n      } catch (error) {\r\n        console.error('AuthContext removeFromCart: Error removing from server cart:', error);\r\n        showCustomModal(`Failed to remove from cart: ${error.message}`);\r\n      }\r\n    } else {\r\n      // If unauthenticated, remove from local cart\r\n      const updatedLocalCart = localCart.filter(item => item.product !== productId);\r\n      setLocalCart(updatedLocalCart); // Update local cart state\r\n      showCustomModal('Product removed from local cart.'); // This should still require OK click\r\n    }\r\n  };\r\n\r\n  // Function to clear all items from the cart\r\n  const clearCart = async () => {\r\n    if (token) {\r\n      // If authenticated, clear server cart via API\r\n      try {\r\n        const response = await fetch(`${backendBaseUrl}/api/cart`, { // Using deployed backend URL\r\n          method: 'DELETE',\r\n          headers: {\r\n            'Authorization': `Bearer ${token}`,\r\n          },\r\n        });\r\n        if (!response.ok) {\r\n          const errorData = await response.json();\r\n          throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\r\n        }\r\n        const clearedCart = await response.json();\r\n        setServerCart(clearedCart); // Update server cart state to empty\r\n        showCustomModal('Cart cleared successfully.'); // This should still require OK click\r\n      } catch (error) {\r\n        console.error('AuthContext clearCart: Error clearing server cart:', error);\r\n        showCustomModal(`Failed to clear cart: ${error.message}`);\r\n      }\r\n    } else {\r\n      // If unauthenticated, clear local cart\r\n      setLocalCart([]); // Set local cart to empty array\r\n      showCustomModal('Local cart cleared successfully.'); // This should still require OK click\r\n    }\r\n  };\r\n\r\n  // Determine which cart to display based on authentication status\r\n  const currentDisplayCart = token ? serverCart : {\r\n    items: localCart,\r\n    // Calculate total amount for local cart items dynamically\r\n    totalAmount: localCart.reduce((acc, item) => acc + (item.price * item.quantity), 0)\r\n  };\r\n\r\n  // The object containing all values and functions that will be exposed through the context\r\n  const authContextValue = {\r\n    user,             // Currently authenticated user data\r\n    token,            // JWT token\r\n    login,            // Function to log in a user\r\n    logout,           // Function to log out a user\r\n    cart: currentDisplayCart, // The active cart (local or server)\r\n    addToCart,        // Function to add product to cart\r\n    updateCartQuantity, // Function to update product quantity in cart\r\n    removeFromCart,   // Function to remove product from cart\r\n    clearCart,        // Function to clear the entire cart\r\n    fetchServerCart,  // Function to manually fetch server cart (internal use mostly)\r\n    showCustomModal,  // Utility function to show custom alert/confirm modals\r\n    fetchWalletBalance // NEW: Function to fetch wallet balance\r\n  };\r\n\r\n  return (\r\n    // Provide the constructed context value to all child components\r\n    <AuthContext.Provider value={authContextValue}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n\r\n// Custom hook to easily consume the AuthContext in any functional component\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  // Throw an error if useAuth is used outside of an AuthProvider, helping debugging\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context; // Return the context value\r\n};\r\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,EAAEC,aAAa,EAAEC,UAAU,QAAQ,OAAO;;AAE1F;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,WAAW,gBAAGJ,aAAa,CAAC,IAAI,CAAC;;AAE9C;AACA,OAAO,SAASK,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACzC;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACtC;EACA,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EACxC;EACA,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAC9C;EACA,MAAM,CAACiB,UAAU,EAAEC,aAAa,CAAC,GAAGlB,QAAQ,CAAC;IAAEmB,KAAK,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAE,CAAC,CAAC;;EAE3E;EACA;EACA,MAAMC,cAAc,GAAG,wCAAwC;;EAE/D;EACA;EACA,MAAMC,eAAe,GAAGpB,WAAW,CAAC,CAACqB,OAAO,EAAEC,SAAS,GAAGA,CAAA,KAAM,CAAC,CAAC,EAAEC,mBAAmB,GAAG,CAAC,KAAK;IAC9F;IACA,MAAMC,aAAa,GAAGC,QAAQ,CAACC,cAAc,CAAC,wBAAwB,CAAC;IACvE,IAAIF,aAAa,EAAE;MACjBC,QAAQ,CAACE,IAAI,CAACC,WAAW,CAACJ,aAAa,CAAC;IAC1C;;IAEA;IACA,MAAMK,YAAY,GAAGJ,QAAQ,CAACK,aAAa,CAAC,KAAK,CAAC;IAClDD,YAAY,CAACE,EAAE,GAAG,wBAAwB,CAAC,CAAC;IAC5CF,YAAY,CAACG,SAAS,GAAG,4EAA4E;IAErG,IAAIC,gBAAgB,GAAG;AAC3B;AACA,gDAAgDZ,OAAO;AACvD,KAAK;;IAED;IACA,IAAIE,mBAAmB,KAAK,CAAC,EAAE;MAC7BU,gBAAgB,IAAI;AAC1B;AACA,OAAO;IACH;IAEAA,gBAAgB,IAAI,QAAQ;IAC5BJ,YAAY,CAACK,SAAS,GAAGD,gBAAgB;;IAEzC;IACAR,QAAQ,CAACE,IAAI,CAACQ,WAAW,CAACN,YAAY,CAAC;;IAEvC;IACA,IAAIN,mBAAmB,GAAG,CAAC,EAAE;MAC3Ba,UAAU,CAAC,MAAM;QACf,IAAIX,QAAQ,CAACE,IAAI,CAACU,QAAQ,CAACR,YAAY,CAAC,EAAE;UACxCJ,QAAQ,CAACE,IAAI,CAACC,WAAW,CAACC,YAAY,CAAC;QACzC;QACAP,SAAS,CAAC,CAAC,CAAC,CAAC;MACf,CAAC,EAAEC,mBAAmB,CAAC;IACzB,CAAC,MAAM;MACL;MACA,MAAMe,UAAU,GAAGT,YAAY,CAACU,aAAa,CAAC,oBAAoB,CAAC;MACnE,IAAID,UAAU,EAAE;QACdA,UAAU,CAACE,gBAAgB,CAAC,OAAO,EAAE,MAAM;UACzC,IAAIf,QAAQ,CAACE,IAAI,CAACU,QAAQ,CAACR,YAAY,CAAC,EAAE;YACxCJ,QAAQ,CAACE,IAAI,CAACC,WAAW,CAACC,YAAY,CAAC;UACzC;UACAP,SAAS,CAAC,CAAC;QACb,CAAC,CAAC;MACJ;IACF;EACF,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACAvB,SAAS,CAAC,MAAM;IACd,MAAM0C,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACjD,MAAMC,UAAU,GAAGF,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC/C,MAAME,eAAe,GAAGH,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;;IAEzD;IACA,IAAIF,WAAW,IAAIG,UAAU,EAAE;MAC7B,IAAI;QACFlC,OAAO,CAACoC,IAAI,CAACC,KAAK,CAACH,UAAU,CAAC,CAAC;QAC/BhC,QAAQ,CAAC6B,WAAW,CAAC;MACvB,CAAC,CAAC,OAAOO,CAAC,EAAE;QACVC,OAAO,CAACC,KAAK,CAAC,iEAAiE,EAAEF,CAAC,CAAC;QACnF;QACAN,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;QAChCT,YAAY,CAACS,UAAU,CAAC,MAAM,CAAC;MACjC;IACF;IACA;IACA,IAAIN,eAAe,EAAE;MACnB,IAAI;QACF;QACA,MAAMO,UAAU,GAAGN,IAAI,CAACC,KAAK,CAACF,eAAe,CAAC;QAC9C,IAAIQ,KAAK,CAACC,OAAO,CAACF,UAAU,CAAC,EAAE;UAC7BtC,YAAY,CAACsC,UAAU,CAAC;QAC1B,CAAC,MAAM;UACLH,OAAO,CAACM,IAAI,CAAC,4DAA4D,CAAC;UAC1Eb,YAAY,CAACS,UAAU,CAAC,WAAW,CAAC;QACtC;MACF,CAAC,CAAC,OAAOH,CAAC,EAAE;QACVC,OAAO,CAACC,KAAK,CAAC,uEAAuE,EAAEF,CAAC,CAAC;QACzF;QACAN,YAAY,CAACS,UAAU,CAAC,WAAW,CAAC;MACtC;IACF;EACF,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACApD,SAAS,CAAC,MAAM;IACd;IACA,IAAIsD,KAAK,CAACC,OAAO,CAACzC,SAAS,CAAC,EAAE;MAC5B6B,YAAY,CAACc,OAAO,CAAC,WAAW,EAAEV,IAAI,CAACW,SAAS,CAAC5C,SAAS,CAAC,CAAC;IAC9D;EACF,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC,CAAC,CAAC;;EAEjB;EACA,MAAM6C,eAAe,GAAG1D,WAAW,CAAC,MAAO2D,SAAS,IAAK;IACvD;IACA,IAAI,CAACA,SAAS,EAAE;MACd3C,aAAa,CAAC;QAAEC,KAAK,EAAE,EAAE;QAAEC,WAAW,EAAE;MAAE,CAAC,CAAC;MAC5C;IACF;IACA+B,OAAO,CAACW,GAAG,CAAC,mEAAmE,CAAC;IAChF,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG3C,cAAc,WAAW,EAAE;QAAE;QAC3D4C,OAAO,EAAE;UACP,eAAe,EAAE,UAAUJ,SAAS,EAAE,CAAE;QAC1C;MACF,CAAC,CAAC;MACF,IAAI,CAACE,QAAQ,CAACG,EAAE,EAAE;QAChB;QACA,IAAIH,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;UAC3BhB,OAAO,CAACM,IAAI,CAAC,qEAAqE,CAAC;UACnF;UACAnC,eAAe,CAAC,gDAAgD,EAAE,MAAM;YACtE8C,MAAM,CAAC,CAAC,CAAC,CAAC;UACZ,CAAC,CAAC;QACJ;QACA,MAAM,IAAIC,KAAK,CAAC,uBAAuBN,QAAQ,CAACI,MAAM,EAAE,CAAC;MAC3D;MACA,MAAMG,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClCpB,OAAO,CAACW,GAAG,CAAC,gEAAgE,EAAEQ,IAAI,CAAC;MACnFpD,aAAa,CAACoD,IAAI,CAAC,CAAC,CAAC;MACrB;MACAtD,YAAY,CAAC,EAAE,CAAC;MAChB4B,YAAY,CAACS,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;IACxC,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,mDAAmD,EAAEA,KAAK,CAAC;MACzE;MACAlC,aAAa,CAAC;QAAEC,KAAK,EAAE,EAAE;QAAEC,WAAW,EAAE;MAAE,CAAC,CAAC;IAC9C;EACF,CAAC,EAAE,CAACE,eAAe,EAAED,cAAc,CAAC,CAAC,CAAC,CAAC;;EAEvC;EACA,MAAMmD,wBAAwB,GAAGtE,WAAW,CAAC,MAAO2D,SAAS,IAAK;IAChE;IACA,IAAI9C,SAAS,CAAC0D,MAAM,KAAK,CAAC,IAAI,CAACZ,SAAS,EAAE;IAE1C,IAAI;MACFV,OAAO,CAACW,GAAG,CAAC,0FAA0F,CAAC;MACvG;MACA,KAAK,MAAMY,IAAI,IAAI3D,SAAS,EAAE;QAC5B;QACA;QACA,MAAMgD,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG3C,cAAc,WAAW,EAAE;UAAE;UAC3DsD,MAAM,EAAE,MAAM;UACdV,OAAO,EAAE;YACP,cAAc,EAAE,kBAAkB;YAClC,eAAe,EAAE,UAAUJ,SAAS;UACtC,CAAC;UACDhC,IAAI,EAAEmB,IAAI,CAACW,SAAS,CAAC;YAAEiB,SAAS,EAAEF,IAAI,CAACG,OAAO;YAAEC,QAAQ,EAAEJ,IAAI,CAACI;UAAS,CAAC;QAC3E,CAAC,CAAC;QAEF,IAAI,CAACf,QAAQ,CAACG,EAAE,EAAE;UAChB,MAAMa,SAAS,GAAG,MAAMhB,QAAQ,CAACQ,IAAI,CAAC,CAAC;UACvC;UACApB,OAAO,CAACC,KAAK,CAAC,4DAA4DsB,IAAI,CAACM,IAAI,GAAG,EAAED,SAAS,CAACxD,OAAO,IAAIwC,QAAQ,CAACI,MAAM,CAAC;QAC/H;MACF;MACA;MACA7C,eAAe,CAAC,oDAAoD,EAAE,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;MACvF;MACAN,YAAY,CAAC,EAAE,CAAC;MAChB4B,YAAY,CAACS,UAAU,CAAC,WAAW,CAAC;MACpC;MACAO,eAAe,CAACC,SAAS,CAAC;IAC5B,CAAC,CAAC,OAAOT,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,wEAAwE,EAAEA,KAAK,CAAC;MAC9F9B,eAAe,CAAC,6CAA6C,CAAC,CAAC,CAAC;IAClE;EACF,CAAC,EAAE,CAACP,SAAS,EAAE6C,eAAe,EAAEtC,eAAe,EAAED,cAAc,CAAC,CAAC,CAAC,CAAC;;EAEnE;EACA,MAAM4D,kBAAkB,GAAG/E,WAAW,CAAC,MAAO2D,SAAS,IAAK;IAC1D,IAAI,CAACA,SAAS,EAAE;MACd;MACAjD,OAAO,CAACsE,QAAQ,IAAKA,QAAQ,GAAG;QAAE,GAAGA,QAAQ;QAAEC,aAAa,EAAE;MAAE,CAAC,GAAG,IAAK,CAAC;MAC1E;IACF;IACA,IAAI;MACF,MAAMpB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG3C,cAAc,qBAAqB,EAAE;QACnE4C,OAAO,EAAE;UACP,eAAe,EAAE,UAAUJ,SAAS;QACtC;MACF,CAAC,CAAC;MACF,IAAI,CAACE,QAAQ,CAACG,EAAE,EAAE;QAChB;QACA;QACAf,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAEW,QAAQ,CAACI,MAAM,CAAC;QACjEvD,OAAO,CAACsE,QAAQ,IAAKA,QAAQ,GAAG;UAAE,GAAGA,QAAQ;UAAEC,aAAa,EAAE;QAAE,CAAC,GAAG,IAAK,CAAC;QAC1E;MACF;MACA,MAAMb,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClC;MACA3D,OAAO,CAACsE,QAAQ,KAAK;QACnB,GAAGA,QAAQ;QACXC,aAAa,EAAEb,IAAI,CAACa;MACtB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,OAAO/B,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtDxC,OAAO,CAACsE,QAAQ,IAAKA,QAAQ,GAAG;QAAE,GAAGA,QAAQ;QAAEC,aAAa,EAAE;MAAE,CAAC,GAAG,IAAK,CAAC,CAAC,CAAC;IAC9E;EACF,CAAC,EAAE,CAAC9D,cAAc,CAAC,CAAC,CAAC,CAAC;;EAEtB;EACA;EACApB,SAAS,CAAC,MAAM;IACdkD,OAAO,CAACW,GAAG,CAAC,8HAA8H,CAAC;IAC3I,IAAIjD,KAAK,EAAE;MACT+C,eAAe,CAAC/C,KAAK,CAAC;MACtB2D,wBAAwB,CAAC3D,KAAK,CAAC;MAC/BoE,kBAAkB,CAACpE,KAAK,CAAC,CAAC,CAAC;IAC7B,CAAC,MAAM;MACLK,aAAa,CAAC;QAAEC,KAAK,EAAE,EAAE;QAAEC,WAAW,EAAE;MAAE,CAAC,CAAC,CAAC,CAAC;MAC9CR,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;IACjB;EACF,CAAC,EAAE,CAACC,KAAK,EAAE+C,eAAe,EAAEY,wBAAwB,EAAES,kBAAkB,CAAC,CAAC,CAAC,CAAC;;EAE5E;EACA,MAAMG,KAAK,GAAGA,CAACC,QAAQ,EAAEC,SAAS,KAAK;IACrC1E,OAAO,CAACyE,QAAQ,CAAC;IACjBvE,QAAQ,CAACwE,SAAS,CAAC;IACnB1C,YAAY,CAACc,OAAO,CAAC,OAAO,EAAE4B,SAAS,CAAC;IACxC1C,YAAY,CAACc,OAAO,CAAC,MAAM,EAAEV,IAAI,CAACW,SAAS,CAAC0B,QAAQ,CAAC,CAAC;IACtDlC,OAAO,CAACW,GAAG,CAAC,4EAA4E,CAAC;IACzF;EACF,CAAC;;EAED;EACA,MAAMM,MAAM,GAAGA,CAAA,KAAM;IACnBjB,OAAO,CAACW,GAAG,CAAC,gFAAgF,CAAC;IAC7FlD,OAAO,CAAC,IAAI,CAAC;IACbE,QAAQ,CAAC,IAAI,CAAC;IACdI,aAAa,CAAC;MAAEC,KAAK,EAAE,EAAE;MAAEC,WAAW,EAAE;IAAE,CAAC,CAAC,CAAC,CAAC;IAC9CwB,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;IAChCT,YAAY,CAACS,UAAU,CAAC,MAAM,CAAC;IAC/B;EACF,CAAC;;EAED;EACA,MAAMkC,SAAS,GAAG,MAAAA,CAAOX,SAAS,EAAEE,QAAQ,GAAG,CAAC,EAAEU,cAAc,GAAG,CAAC,CAAC,KAAK;IACxE,IAAI,CAACZ,SAAS,EAAE;MACdtD,eAAe,CAAC,uDAAuD,CAAC;MACxE6B,OAAO,CAACC,KAAK,CAAC,uDAAuD,CAAC;MACtE;IACF;IAEA,IAAIvC,KAAK,EAAE;MACT;MACA,IAAI;QACF,MAAMkD,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG3C,cAAc,WAAW,EAAE;UAAE;UAC3DsD,MAAM,EAAE,MAAM;UACdV,OAAO,EAAE;YACP,cAAc,EAAE,kBAAkB;YAClC,eAAe,EAAE,UAAUpD,KAAK;UAClC,CAAC;UACDgB,IAAI,EAAEmB,IAAI,CAACW,SAAS,CAAC;YAAEiB,SAAS;YAAEE;UAAS,CAAC;QAC9C,CAAC,CAAC;QACF,IAAI,CAACf,QAAQ,CAACG,EAAE,EAAE;UAChB,MAAMa,SAAS,GAAG,MAAMhB,QAAQ,CAACQ,IAAI,CAAC,CAAC;UACvC,MAAM,IAAIF,KAAK,CAACU,SAAS,CAACxD,OAAO,IAAI,uBAAuBwC,QAAQ,CAACI,MAAM,EAAE,CAAC;QAChF;QACA,MAAMsB,WAAW,GAAG,MAAM1B,QAAQ,CAACQ,IAAI,CAAC,CAAC;QACzCrD,aAAa,CAACuE,WAAW,CAAC,CAAC,CAAC;QAC5B;QACAnE,eAAe,CAAC,wBAAwB,EAAE,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;MAC7D,CAAC,CAAC,OAAO8B,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,qDAAqD,EAAEA,KAAK,CAAC;QAC3E9B,eAAe,CAAC,0BAA0B8B,KAAK,CAAC7B,OAAO,EAAE,CAAC;MAC5D;IACF,CAAC,MAAM;MACL;MACA,MAAMmE,iBAAiB,GAAG3E,SAAS,CAAC4E,SAAS,CAACjB,IAAI,IAAIA,IAAI,CAACG,OAAO,KAAKD,SAAS,CAAC;MACjF,IAAIgB,gBAAgB;MAEpB,IAAIF,iBAAiB,GAAG,CAAC,CAAC,EAAE;QAC1B;QACAE,gBAAgB,GAAG7E,SAAS,CAAC8E,GAAG,CAAC,CAACnB,IAAI,EAAEoB,KAAK,KAC3CA,KAAK,KAAKJ,iBAAiB,GAAG;UAAE,GAAGhB,IAAI;UAAEI,QAAQ,EAAEJ,IAAI,CAACI,QAAQ,GAAGA;QAAS,CAAC,GAAGJ,IAClF,CAAC;MACH,CAAC,MAAM;QACL;QACA;QACA,IAAI,CAACc,cAAc,CAACR,IAAI,IAAI,CAACQ,cAAc,CAACO,KAAK,EAAE;UACjD5C,OAAO,CAACM,IAAI,CAAC,uGAAuG,CAAC;UACrH,IAAI;YACF;YACA,MAAMuC,GAAG,GAAG,MAAMhC,KAAK,CAAC,GAAG3C,cAAc,iBAAiBuD,SAAS,EAAE,CAAC,CAAC,CAAC;YACxE,MAAMqB,WAAW,GAAG,MAAMD,GAAG,CAACzB,IAAI,CAAC,CAAC;YACpC,IAAIyB,GAAG,CAAC9B,EAAE,EAAE;cACVsB,cAAc,GAAG;gBACfR,IAAI,EAAEiB,WAAW,CAACjB,IAAI;gBACtBkB,QAAQ,EAAED,WAAW,CAACC,QAAQ;gBAC9BH,KAAK,EAAEE,WAAW,CAACF;cACrB,CAAC;YACH,CAAC,MAAM;cACL5C,OAAO,CAACC,KAAK,CAAC,wEAAwE,EAAE6C,WAAW,CAAC1E,OAAO,CAAC;cAC5GiE,cAAc,GAAG;gBAAER,IAAI,EAAE,iBAAiB;gBAAEkB,QAAQ,EAAE,EAAE;gBAAEH,KAAK,EAAE;cAAE,CAAC,CAAC,CAAC;YACxE;UACF,CAAC,CAAC,OAAOI,QAAQ,EAAE;YACjBhD,OAAO,CAACC,KAAK,CAAC,uEAAuE,EAAE+C,QAAQ,CAAC;YAChGX,cAAc,GAAG;cAAER,IAAI,EAAE,iBAAiB;cAAEkB,QAAQ,EAAE,EAAE;cAAEH,KAAK,EAAE;YAAE,CAAC,CAAC,CAAC;UACxE;QACF;QAEAH,gBAAgB,GAAG,CACjB,GAAG7E,SAAS,EACZ;UACE8D,OAAO,EAAED,SAAS;UAAE;UACpBI,IAAI,EAAEQ,cAAc,CAACR,IAAI;UACzBkB,QAAQ,EAAEV,cAAc,CAACU,QAAQ;UACjCH,KAAK,EAAEP,cAAc,CAACO,KAAK;UAC3BjB,QAAQ,EAAEA;QACZ,CAAC,CACF;MACH;MACA9D,YAAY,CAAC4E,gBAAgB,CAAC,CAAC,CAAC;MAChC;MACAtE,eAAe,CAAC,8BAA8B,EAAE,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IACnE;EACF,CAAC;;EAED;EACA,MAAM8E,kBAAkB,GAAG,MAAAA,CAAOxB,SAAS,EAAEE,QAAQ,KAAK;IACxD,IAAIA,QAAQ,GAAG,CAAC,EAAE;MAChBxD,eAAe,CAAC,8BAA8B,CAAC;MAC/C;IACF;IAEA,IAAIT,KAAK,EAAE;MACT;MACA,IAAI;QACF,MAAMkD,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG3C,cAAc,aAAauD,SAAS,EAAE,EAAE;UAAE;UACxED,MAAM,EAAE,KAAK;UACbV,OAAO,EAAE;YACP,cAAc,EAAE,kBAAkB;YAClC,eAAe,EAAE,UAAUpD,KAAK;UAClC,CAAC;UACDgB,IAAI,EAAEmB,IAAI,CAACW,SAAS,CAAC;YAAEmB;UAAS,CAAC;QACnC,CAAC,CAAC;QACF,IAAI,CAACf,QAAQ,CAACG,EAAE,EAAE;UAChB,MAAMa,SAAS,GAAG,MAAMhB,QAAQ,CAACQ,IAAI,CAAC,CAAC;UACvC,MAAM,IAAIF,KAAK,CAACU,SAAS,CAACxD,OAAO,IAAI,uBAAuBwC,QAAQ,CAACI,MAAM,EAAE,CAAC;QAChF;QACA,MAAMsB,WAAW,GAAG,MAAM1B,QAAQ,CAACQ,IAAI,CAAC,CAAC;QACzCrD,aAAa,CAACuE,WAAW,CAAC,CAAC,CAAC;MAC9B,CAAC,CAAC,OAAOrC,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,sEAAsE,EAAEA,KAAK,CAAC;QAC5F9B,eAAe,CAAC,8BAA8B8B,KAAK,CAAC7B,OAAO,EAAE,CAAC;MAChE;IACF,CAAC,MAAM;MACL;MACA,MAAMqE,gBAAgB,GAAG7E,SAAS,CAAC8E,GAAG,CAACnB,IAAI,IACzCA,IAAI,CAACG,OAAO,KAAKD,SAAS,GAAG;QAAE,GAAGF,IAAI;QAAEI,QAAQ,EAAEA;MAAS,CAAC,GAAGJ,IACjE,CAAC,CAAC2B,MAAM,CAAC3B,IAAI,IAAIA,IAAI,CAACI,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;;MAErC9D,YAAY,CAAC4E,gBAAgB,CAAC,CAAC,CAAC;IAClC;EACF,CAAC;;EAED;EACA,MAAMU,cAAc,GAAG,MAAO1B,SAAS,IAAK;IAC1C,IAAI/D,KAAK,EAAE;MACT;MACA,IAAI;QACF,MAAMkD,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG3C,cAAc,aAAauD,SAAS,EAAE,EAAE;UAAE;UACxED,MAAM,EAAE,QAAQ;UAChBV,OAAO,EAAE;YACP,eAAe,EAAE,UAAUpD,KAAK;UAClC;QACF,CAAC,CAAC;QACF,IAAI,CAACkD,QAAQ,CAACG,EAAE,EAAE;UAChB,MAAMa,SAAS,GAAG,MAAMhB,QAAQ,CAACQ,IAAI,CAAC,CAAC;UACvC,MAAM,IAAIF,KAAK,CAACU,SAAS,CAACxD,OAAO,IAAI,uBAAuBwC,QAAQ,CAACI,MAAM,EAAE,CAAC;QAChF;QACA,MAAMsB,WAAW,GAAG,MAAM1B,QAAQ,CAACQ,IAAI,CAAC,CAAC;QACzCrD,aAAa,CAACuE,WAAW,CAAC,CAAC,CAAC;QAC5BnE,eAAe,CAAC,4BAA4B,CAAC,CAAC,CAAC;MACjD,CAAC,CAAC,OAAO8B,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,8DAA8D,EAAEA,KAAK,CAAC;QACpF9B,eAAe,CAAC,+BAA+B8B,KAAK,CAAC7B,OAAO,EAAE,CAAC;MACjE;IACF,CAAC,MAAM;MACL;MACA,MAAMqE,gBAAgB,GAAG7E,SAAS,CAACsF,MAAM,CAAC3B,IAAI,IAAIA,IAAI,CAACG,OAAO,KAAKD,SAAS,CAAC;MAC7E5D,YAAY,CAAC4E,gBAAgB,CAAC,CAAC,CAAC;MAChCtE,eAAe,CAAC,kCAAkC,CAAC,CAAC,CAAC;IACvD;EACF,CAAC;;EAED;EACA,MAAMiF,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI1F,KAAK,EAAE;MACT;MACA,IAAI;QACF,MAAMkD,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG3C,cAAc,WAAW,EAAE;UAAE;UAC3DsD,MAAM,EAAE,QAAQ;UAChBV,OAAO,EAAE;YACP,eAAe,EAAE,UAAUpD,KAAK;UAClC;QACF,CAAC,CAAC;QACF,IAAI,CAACkD,QAAQ,CAACG,EAAE,EAAE;UAChB,MAAMa,SAAS,GAAG,MAAMhB,QAAQ,CAACQ,IAAI,CAAC,CAAC;UACvC,MAAM,IAAIF,KAAK,CAACU,SAAS,CAACxD,OAAO,IAAI,uBAAuBwC,QAAQ,CAACI,MAAM,EAAE,CAAC;QAChF;QACA,MAAMqC,WAAW,GAAG,MAAMzC,QAAQ,CAACQ,IAAI,CAAC,CAAC;QACzCrD,aAAa,CAACsF,WAAW,CAAC,CAAC,CAAC;QAC5BlF,eAAe,CAAC,4BAA4B,CAAC,CAAC,CAAC;MACjD,CAAC,CAAC,OAAO8B,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,oDAAoD,EAAEA,KAAK,CAAC;QAC1E9B,eAAe,CAAC,yBAAyB8B,KAAK,CAAC7B,OAAO,EAAE,CAAC;MAC3D;IACF,CAAC,MAAM;MACL;MACAP,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC;MAClBM,eAAe,CAAC,kCAAkC,CAAC,CAAC,CAAC;IACvD;EACF,CAAC;;EAED;EACA,MAAMmF,kBAAkB,GAAG5F,KAAK,GAAGI,UAAU,GAAG;IAC9CE,KAAK,EAAEJ,SAAS;IAChB;IACAK,WAAW,EAAEL,SAAS,CAAC2F,MAAM,CAAC,CAACC,GAAG,EAAEjC,IAAI,KAAKiC,GAAG,GAAIjC,IAAI,CAACqB,KAAK,GAAGrB,IAAI,CAACI,QAAS,EAAE,CAAC;EACpF,CAAC;;EAED;EACA,MAAM8B,gBAAgB,GAAG;IACvBjG,IAAI;IAAc;IAClBE,KAAK;IAAa;IAClBuE,KAAK;IAAa;IAClBhB,MAAM;IAAY;IAClByC,IAAI,EAAEJ,kBAAkB;IAAE;IAC1BlB,SAAS;IAAS;IAClBa,kBAAkB;IAAE;IACpBE,cAAc;IAAI;IAClBC,SAAS;IAAS;IAClB3C,eAAe;IAAG;IAClBtC,eAAe;IAAG;IAClB2D,kBAAkB,CAAC;EACrB,CAAC;EAED;IAAA;IACE;IACA3E,OAAA,CAACC,WAAW,CAACuG,QAAQ;MAACC,KAAK,EAAEH,gBAAiB;MAAAnG,QAAA,EAC3CA;IAAQ;MAAAuG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACW;EAAC;AAE3B;;AAEA;AAAAzG,EAAA,CApdgBF,YAAY;AAAA4G,EAAA,GAAZ5G,YAAY;AAqd5B,OAAO,MAAM6G,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAGnH,UAAU,CAACG,WAAW,CAAC;EACvC;EACA,IAAIgH,OAAO,KAAKC,SAAS,EAAE;IACzB,MAAM,IAAInD,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOkD,OAAO,CAAC,CAAC;AAClB,CAAC;AAACD,GAAA,CAPWD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}