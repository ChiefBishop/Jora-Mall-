{"ast":null,"code":"import _objectSpread from\"C:/Users/HP/OneDrive/Desktop/SUCCESSFUL PROJECTS/Jora mall/frontend/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState}from'react';import{Link,useNavigate}from'react-router-dom';import{useAuth}from'./AuthContext';// Import useAuth hook to access custom modal utility\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function Register(){const navigate=useNavigate();// Hook for programmatic navigation\nconst{showCustomModal}=useAuth();// Get custom modal utility from AuthContext\n// State to hold the form input values for username, email, and password\nconst[formData,setFormData]=useState({username:'',email:'',password:''});// State to manage the loading status during the registration API call\nconst[loading,setLoading]=useState(false);// State to store and display any error messages from the registration process\nconst[error,setError]=useState(null);// State to indicate successful registration (used for displaying a temporary message)\nconst[success,setSuccess]=useState(false);// Handler for changes in the input fields. Updates the formData state.\nconst handleChange=e=>{const{name,value}=e.target;setFormData(prevData=>_objectSpread(_objectSpread({},prevData),{},{[name]:value// Dynamically update the field corresponding to the input's 'name' attribute\n}));};// Handler for the form submission. This function sends the registration request to the backend.\nconst handleSubmit=async e=>{e.preventDefault();// Prevent the default form submission behavior (page reload)\nsetLoading(true);// Set loading state to true\nsetError(null);// Clear any previous error messages\nsetSuccess(false);// Clear previous success state\ntry{// Send a POST request to your backend's registration API endpoint\nconst response=await fetch('https://jora-mall-backend.onrender.com/api/auth/register',{method:'POST',// HTTP method\nheaders:{'Content-Type':'application/json'// Specify that the request body is JSON\n},body:JSON.stringify(formData)// Convert formData object to a JSON string\n});// Check if the HTTP response was successful (status code 200-299)\nif(!response.ok){// If not successful, parse the error response from the backend\nconst errorData=await response.json();// Throw an error with the message provided by the backend, or a generic HTTP error message\nthrow new Error(errorData.message||\"HTTP error! status: \".concat(response.status));}// If the response is successful, parse the success data (user info, token)\nconst data=await response.json();console.log('Registration successful:',data);setSuccess(true);// Set success state to true\n// Show a success message using the custom modal\nshowCustomModal('Registration successful! Please log in.',()=>{navigate('/login');// After the user clicks OK on the modal, navigate to the login page\n});}catch(err){console.error('Error during registration:',err);// Log the detailed error to the console for debugging\nsetError(err.message);// Set the error message to display on the form\nshowCustomModal(\"Registration failed: \".concat(err.message));// Show the error message in the custom modal\n}finally{setLoading(false);// Reset loading state to false, whether registration succeeded or failed\n}};return/*#__PURE__*/_jsx(\"div\",{className:\"min-h-screen flex items-center justify-center bg-[#000080] p-4\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white p-8 rounded-xl shadow-lg w-full max-w-md\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-3xl font-bold text-gray-800 text-center mb-6\",children:\"Register Account\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,className:\"space-y-5\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"username\",className:\"block text-sm font-medium text-gray-700\",children:\"Username\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"username\",name:\"username\",value:formData.username,onChange:handleChange,className:\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm\",required:true// HTML5 validation: field must not be empty\n})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"email\",className:\"block text-sm font-medium text-gray-700\",children:\"Email\"}),/*#__PURE__*/_jsx(\"input\",{type:\"email\",id:\"email\",name:\"email\",value:formData.email,onChange:handleChange,className:\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm\",required:true// HTML5 validation: field must not be empty\n})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"password\",className:\"block text-sm font-medium text-gray-700\",children:\"Password\"}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",id:\"password\",name:\"password\",value:formData.password,onChange:handleChange,className:\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm\",required:true// HTML5 validation: field must not be empty\n})]}),error&&/*#__PURE__*/_jsx(\"p\",{className:\"text-red-600 text-sm text-center\",children:error}),success&&/*#__PURE__*/_jsx(\"p\",{className:\"text-green-600 text-sm text-center\",children:\"Registration successful! Redirecting to login...\"}),/*#__PURE__*/_jsxs(\"button\",{type:\"submit\",className:\"w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\",disabled:loading// Disable the button while an API call is in progress\n,children:[loading?'Registering...':'Register',\" \"]})]}),/*#__PURE__*/_jsxs(\"p\",{className:\"mt-6 text-center text-sm text-gray-600\",children:[\"Already have an account?\",' ',/*#__PURE__*/_jsx(Link,{to:\"/login\",className:\"font-medium text-blue-600 hover:text-blue-500\",children:\"Login here\"})]})]})});}export default Register;// Export the Register component for use in App.js","map":{"version":3,"names":["React","useState","Link","useNavigate","useAuth","jsx","_jsx","jsxs","_jsxs","Register","navigate","showCustomModal","formData","setFormData","username","email","password","loading","setLoading","error","setError","success","setSuccess","handleChange","e","name","value","target","prevData","_objectSpread","handleSubmit","preventDefault","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","Error","message","concat","status","data","console","log","err","className","children","onSubmit","htmlFor","type","id","onChange","required","disabled","to"],"sources":["C:/Users/HP/OneDrive/Desktop/SUCCESSFUL PROJECTS/Jora mall/frontend/client/src/Register.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { useAuth } from './AuthContext'; // Import useAuth hook to access custom modal utility\r\n\r\nfunction Register() {\r\n  const navigate = useNavigate(); // Hook for programmatic navigation\r\n  const { showCustomModal } = useAuth(); // Get custom modal utility from AuthContext\r\n\r\n  // State to hold the form input values for username, email, and password\r\n  const [formData, setFormData] = useState({\r\n    username: '',\r\n    email: '',\r\n    password: '',\r\n  });\r\n  // State to manage the loading status during the registration API call\r\n  const [loading, setLoading] = useState(false);\r\n  // State to store and display any error messages from the registration process\r\n  const [error, setError] = useState(null);\r\n  // State to indicate successful registration (used for displaying a temporary message)\r\n  const [success, setSuccess] = useState(false);\r\n\r\n  // Handler for changes in the input fields. Updates the formData state.\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prevData) => ({\r\n      ...prevData,\r\n      [name]: value, // Dynamically update the field corresponding to the input's 'name' attribute\r\n    }));\r\n  };\r\n\r\n  // Handler for the form submission. This function sends the registration request to the backend.\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault(); // Prevent the default form submission behavior (page reload)\r\n    setLoading(true); // Set loading state to true\r\n    setError(null); // Clear any previous error messages\r\n    setSuccess(false); // Clear previous success state\r\n\r\n    try {\r\n      // Send a POST request to your backend's registration API endpoint\r\n      const response = await fetch('https://jora-mall-backend.onrender.com/api/auth/register', {\r\n        method: 'POST', // HTTP method\r\n        headers: {\r\n          'Content-Type': 'application/json', // Specify that the request body is JSON\r\n        },\r\n        body: JSON.stringify(formData), // Convert formData object to a JSON string\r\n      });\r\n\r\n      // Check if the HTTP response was successful (status code 200-299)\r\n      if (!response.ok) {\r\n        // If not successful, parse the error response from the backend\r\n        const errorData = await response.json();\r\n        // Throw an error with the message provided by the backend, or a generic HTTP error message\r\n        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      // If the response is successful, parse the success data (user info, token)\r\n      const data = await response.json();\r\n      console.log('Registration successful:', data);\r\n      setSuccess(true); // Set success state to true\r\n\r\n      // Show a success message using the custom modal\r\n      showCustomModal('Registration successful! Please log in.', () => {\r\n        navigate('/login'); // After the user clicks OK on the modal, navigate to the login page\r\n      });\r\n\r\n    } catch (err) {\r\n      console.error('Error during registration:', err); // Log the detailed error to the console for debugging\r\n      setError(err.message); // Set the error message to display on the form\r\n      showCustomModal(`Registration failed: ${err.message}`); // Show the error message in the custom modal\r\n    } finally {\r\n      setLoading(false); // Reset loading state to false, whether registration succeeded or failed\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex items-center justify-center bg-[#000080] p-4\">\r\n      <div className=\"bg-white p-8 rounded-xl shadow-lg w-full max-w-md\">\r\n        <h2 className=\"text-3xl font-bold text-gray-800 text-center mb-6\">Register Account</h2>\r\n        <form onSubmit={handleSubmit} className=\"space-y-5\">\r\n          {/* Username input field */}\r\n          <div>\r\n            <label htmlFor=\"username\" className=\"block text-sm font-medium text-gray-700\">Username</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"username\"\r\n              name=\"username\"\r\n              value={formData.username}\r\n              onChange={handleChange}\r\n              className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm\"\r\n              required // HTML5 validation: field must not be empty\r\n            />\r\n          </div>\r\n          {/* Email input field */}\r\n          <div>\r\n            <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700\">Email</label>\r\n            <input\r\n              type=\"email\"\r\n              id=\"email\"\r\n              name=\"email\"\r\n              value={formData.email}\r\n              onChange={handleChange}\r\n              className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm\"\r\n              required // HTML5 validation: field must not be empty\r\n            />\r\n          </div>\r\n          {/* Password input field */}\r\n          <div>\r\n            <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700\">Password</label>\r\n            <input\r\n              type=\"password\"\r\n              id=\"password\"\r\n              name=\"password\"\r\n              value={formData.password}\r\n              onChange={handleChange}\r\n              className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm\"\r\n              required // HTML5 validation: field must not be empty\r\n            />\r\n          </div>\r\n\r\n          {/* Display error message if the `error` state is not null */}\r\n          {error && (\r\n            <p className=\"text-red-600 text-sm text-center\">{error}</p>\r\n          )}\r\n          {/* Display success message if the `success` state is true (will be short-lived due to redirect) */}\r\n          {success && (\r\n            <p className=\"text-green-600 text-sm text-center\">Registration successful! Redirecting to login...</p>\r\n          )}\r\n\r\n          {/* Register button */}\r\n          <button\r\n            type=\"submit\"\r\n            className=\"w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\r\n            disabled={loading} // Disable the button while an API call is in progress\r\n          >\r\n            {loading ? 'Registering...' : 'Register'} {/* Change button text based on loading state */}\r\n          </button>\r\n        </form>\r\n        {/* Link to the login page for existing users */}\r\n        <p className=\"mt-6 text-center text-sm text-gray-600\">\r\n          Already have an account?{' '}\r\n          <Link to=\"/login\" className=\"font-medium text-blue-600 hover:text-blue-500\">\r\n            Login here\r\n          </Link>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Register; // Export the Register component for use in App.js\r\n"],"mappings":"+JAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,OAASC,IAAI,CAAEC,WAAW,KAAQ,kBAAkB,CACpD,OAASC,OAAO,KAAQ,eAAe,CAAE;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEzC,QAAS,CAAAC,QAAQA,CAAA,CAAG,CAClB,KAAM,CAAAC,QAAQ,CAAGP,WAAW,CAAC,CAAC,CAAE;AAChC,KAAM,CAAEQ,eAAgB,CAAC,CAAGP,OAAO,CAAC,CAAC,CAAE;AAEvC;AACA,KAAM,CAACQ,QAAQ,CAAEC,WAAW,CAAC,CAAGZ,QAAQ,CAAC,CACvCa,QAAQ,CAAE,EAAE,CACZC,KAAK,CAAE,EAAE,CACTC,QAAQ,CAAE,EACZ,CAAC,CAAC,CACF;AACA,KAAM,CAACC,OAAO,CAAEC,UAAU,CAAC,CAAGjB,QAAQ,CAAC,KAAK,CAAC,CAC7C;AACA,KAAM,CAACkB,KAAK,CAAEC,QAAQ,CAAC,CAAGnB,QAAQ,CAAC,IAAI,CAAC,CACxC;AACA,KAAM,CAACoB,OAAO,CAAEC,UAAU,CAAC,CAAGrB,QAAQ,CAAC,KAAK,CAAC,CAE7C;AACA,KAAM,CAAAsB,YAAY,CAAIC,CAAC,EAAK,CAC1B,KAAM,CAAEC,IAAI,CAAEC,KAAM,CAAC,CAAGF,CAAC,CAACG,MAAM,CAChCd,WAAW,CAAEe,QAAQ,EAAAC,aAAA,CAAAA,aAAA,IAChBD,QAAQ,MACX,CAACH,IAAI,EAAGC,KAAO;AAAA,EACf,CAAC,CACL,CAAC,CAED;AACA,KAAM,CAAAI,YAAY,CAAG,KAAO,CAAAN,CAAC,EAAK,CAChCA,CAAC,CAACO,cAAc,CAAC,CAAC,CAAE;AACpBb,UAAU,CAAC,IAAI,CAAC,CAAE;AAClBE,QAAQ,CAAC,IAAI,CAAC,CAAE;AAChBE,UAAU,CAAC,KAAK,CAAC,CAAE;AAEnB,GAAI,CACF;AACA,KAAM,CAAAU,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,0DAA0D,CAAE,CACvFC,MAAM,CAAE,MAAM,CAAE;AAChBC,OAAO,CAAE,CACP,cAAc,CAAE,kBAAoB;AACtC,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC1B,QAAQ,CAAG;AAClC,CAAC,CAAC,CAEF;AACA,GAAI,CAACoB,QAAQ,CAACO,EAAE,CAAE,CAChB;AACA,KAAM,CAAAC,SAAS,CAAG,KAAM,CAAAR,QAAQ,CAACS,IAAI,CAAC,CAAC,CACvC;AACA,KAAM,IAAI,CAAAC,KAAK,CAACF,SAAS,CAACG,OAAO,yBAAAC,MAAA,CAA2BZ,QAAQ,CAACa,MAAM,CAAE,CAAC,CAChF,CAEA;AACA,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAd,QAAQ,CAACS,IAAI,CAAC,CAAC,CAClCM,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAEF,IAAI,CAAC,CAC7CxB,UAAU,CAAC,IAAI,CAAC,CAAE;AAElB;AACAX,eAAe,CAAC,yCAAyC,CAAE,IAAM,CAC/DD,QAAQ,CAAC,QAAQ,CAAC,CAAE;AACtB,CAAC,CAAC,CAEJ,CAAE,MAAOuC,GAAG,CAAE,CACZF,OAAO,CAAC5B,KAAK,CAAC,4BAA4B,CAAE8B,GAAG,CAAC,CAAE;AAClD7B,QAAQ,CAAC6B,GAAG,CAACN,OAAO,CAAC,CAAE;AACvBhC,eAAe,yBAAAiC,MAAA,CAAyBK,GAAG,CAACN,OAAO,CAAE,CAAC,CAAE;AAC1D,CAAC,OAAS,CACRzB,UAAU,CAAC,KAAK,CAAC,CAAE;AACrB,CACF,CAAC,CAED,mBACEZ,IAAA,QAAK4C,SAAS,CAAC,gEAAgE,CAAAC,QAAA,cAC7E3C,KAAA,QAAK0C,SAAS,CAAC,mDAAmD,CAAAC,QAAA,eAChE7C,IAAA,OAAI4C,SAAS,CAAC,mDAAmD,CAAAC,QAAA,CAAC,kBAAgB,CAAI,CAAC,cACvF3C,KAAA,SAAM4C,QAAQ,CAAEtB,YAAa,CAACoB,SAAS,CAAC,WAAW,CAAAC,QAAA,eAEjD3C,KAAA,QAAA2C,QAAA,eACE7C,IAAA,UAAO+C,OAAO,CAAC,UAAU,CAACH,SAAS,CAAC,yCAAyC,CAAAC,QAAA,CAAC,UAAQ,CAAO,CAAC,cAC9F7C,IAAA,UACEgD,IAAI,CAAC,MAAM,CACXC,EAAE,CAAC,UAAU,CACb9B,IAAI,CAAC,UAAU,CACfC,KAAK,CAAEd,QAAQ,CAACE,QAAS,CACzB0C,QAAQ,CAAEjC,YAAa,CACvB2B,SAAS,CAAC,iJAAiJ,CAC3JO,QAAQ,KAAC;AAAA,CACV,CAAC,EACC,CAAC,cAENjD,KAAA,QAAA2C,QAAA,eACE7C,IAAA,UAAO+C,OAAO,CAAC,OAAO,CAACH,SAAS,CAAC,yCAAyC,CAAAC,QAAA,CAAC,OAAK,CAAO,CAAC,cACxF7C,IAAA,UACEgD,IAAI,CAAC,OAAO,CACZC,EAAE,CAAC,OAAO,CACV9B,IAAI,CAAC,OAAO,CACZC,KAAK,CAAEd,QAAQ,CAACG,KAAM,CACtByC,QAAQ,CAAEjC,YAAa,CACvB2B,SAAS,CAAC,iJAAiJ,CAC3JO,QAAQ,KAAC;AAAA,CACV,CAAC,EACC,CAAC,cAENjD,KAAA,QAAA2C,QAAA,eACE7C,IAAA,UAAO+C,OAAO,CAAC,UAAU,CAACH,SAAS,CAAC,yCAAyC,CAAAC,QAAA,CAAC,UAAQ,CAAO,CAAC,cAC9F7C,IAAA,UACEgD,IAAI,CAAC,UAAU,CACfC,EAAE,CAAC,UAAU,CACb9B,IAAI,CAAC,UAAU,CACfC,KAAK,CAAEd,QAAQ,CAACI,QAAS,CACzBwC,QAAQ,CAAEjC,YAAa,CACvB2B,SAAS,CAAC,iJAAiJ,CAC3JO,QAAQ,KAAC;AAAA,CACV,CAAC,EACC,CAAC,CAGLtC,KAAK,eACJb,IAAA,MAAG4C,SAAS,CAAC,kCAAkC,CAAAC,QAAA,CAAEhC,KAAK,CAAI,CAC3D,CAEAE,OAAO,eACNf,IAAA,MAAG4C,SAAS,CAAC,oCAAoC,CAAAC,QAAA,CAAC,kDAAgD,CAAG,CACtG,cAGD3C,KAAA,WACE8C,IAAI,CAAC,QAAQ,CACbJ,SAAS,CAAC,0NAA0N,CACpOQ,QAAQ,CAAEzC,OAAS;AAAA,CAAAkC,QAAA,EAElBlC,OAAO,CAAG,gBAAgB,CAAG,UAAU,CAAC,GAAC,EACpC,CAAC,EACL,CAAC,cAEPT,KAAA,MAAG0C,SAAS,CAAC,wCAAwC,CAAAC,QAAA,EAAC,0BAC5B,CAAC,GAAG,cAC5B7C,IAAA,CAACJ,IAAI,EAACyD,EAAE,CAAC,QAAQ,CAACT,SAAS,CAAC,+CAA+C,CAAAC,QAAA,CAAC,YAE5E,CAAM,CAAC,EACN,CAAC,EACD,CAAC,CACH,CAAC,CAEV,CAEA,cAAe,CAAA1C,QAAQ,CAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}