{"ast":null,"code":"import _objectSpread from\"C:/Users/HP/OneDrive/Desktop/SUCCESSFUL PROJECTS/Jora mall/frontend/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// client/src/AuthContext.js\nimport React,{useState,useEffect,useCallback,createContext,useContext}from'react';// Create and EXPORT Auth Context to be consumed by other components\nimport{jsx as _jsx}from\"react/jsx-runtime\";export const AuthContext=/*#__PURE__*/createContext(null);// Auth Provider component that wraps your application and provides global state\nexport function AuthProvider(_ref){let{children}=_ref;// State for the authenticated user data\nconst[user,setUser]=useState(null);// State for the JWT authentication token\nconst[token,setToken]=useState(null);// State for the local cart (used when user is not authenticated)\nconst[localCart,setLocalCart]=useState([]);// State for the server cart (used when user is authenticated)\nconst[serverCart,setServerCart]=useState({items:[],totalAmount:0});// --- IMPORTANT: This URL is for your DEPLOYED backend ---\n// If you redeploy your backend and its URL changes, you MUST update it here.\nconst backendBaseUrl='https://jora-mall-backend.onrender.com';// Custom modal function to display messages to the user.\n// Now accepts an optional `autoDismissDuration` (in ms) to make it disappear automatically.\nconst showCustomModal=useCallback(function(message){let onConfirm=arguments.length>1&&arguments[1]!==undefined?arguments[1]:()=>{};let autoDismissDuration=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;// Remove any existing modals to prevent stacking\nconst existingModal=document.getElementById('custom-modal-container');if(existingModal){document.body.removeChild(existingModal);}// Create the modal container element\nconst modalElement=document.createElement('div');modalElement.id='custom-modal-container';// Assign an ID for easy removal\nmodalElement.className='fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';let modalContentHtml=\"\\n      <div class=\\\"bg-white p-6 rounded-lg shadow-xl text-gray-800 max-w-sm w-full mx-4 text-center\\\">\\n        <p class=\\\"text-lg font-semibold mb-4\\\">\".concat(message,\"</p>\\n    \");// Only add an \"OK\" button if autoDismissDuration is 0 (i.e., manual dismissal)\nif(autoDismissDuration===0){modalContentHtml+=\"\\n        <button id=\\\"modal-confirm-btn\\\" class=\\\"bg-blue-600 text-white px-5 py-2 rounded-md hover:bg-blue-700 transition-colors\\\">OK</button>\\n      \";}modalContentHtml+=\"</div>\";modalElement.innerHTML=modalContentHtml;// Append the modal to the document body\ndocument.body.appendChild(modalElement);// If autoDismissDuration is provided, set a timeout to remove the modal\nif(autoDismissDuration>0){setTimeout(()=>{if(document.body.contains(modalElement)){document.body.removeChild(modalElement);}onConfirm();// Execute callback even for auto-dismissed modals\n},autoDismissDuration);}else{// If no autoDismissDuration, set up click listener for the \"OK\" button\nconst confirmBtn=modalElement.querySelector('#modal-confirm-btn');if(confirmBtn){confirmBtn.addEventListener('click',()=>{if(document.body.contains(modalElement)){document.body.removeChild(modalElement);}onConfirm();});}}},[]);// Empty dependency array means this function definition is stable and won't change\n// Effect to load initial state from localStorage when the component mounts\nuseEffect(()=>{const storedToken=localStorage.getItem('token');const storedUser=localStorage.getItem('user');const storedLocalCart=localStorage.getItem('localCart');// Restore user and token if found in localStorage\nif(storedToken&&storedUser){try{setUser(JSON.parse(storedUser));setToken(storedToken);}catch(e){console.error(\"AuthContext: Failed to parse stored user data from localStorage\",e);// Clear corrupted data to prevent future errors\nlocalStorage.removeItem('token');localStorage.removeItem('user');}}// Restore local cart if found in localStorage\nif(storedLocalCart){try{// Ensure the parsed data is an array before setting\nconst parsedCart=JSON.parse(storedLocalCart);if(Array.isArray(parsedCart)){setLocalCart(parsedCart);}else{console.warn(\"AuthContext: Stored local cart was not an array, clearing.\");localStorage.removeItem('localCart');}}catch(e){console.error(\"AuthContext: Failed to parse stored local cart data from localStorage\",e);// Clear corrupted data\nlocalStorage.removeItem('localCart');}}},[]);// Runs only once on component mount\n// Effect to synchronize the local cart state with localStorage whenever it changes\nuseEffect(()=>{// Only save if localCart is actually an array (to prevent saving initial null/undefined states)\nif(Array.isArray(localCart)){localStorage.setItem('localCart',JSON.stringify(localCart));}},[localCart]);// Re-runs whenever localCart state changes\n// Function to fetch the authenticated user's cart from the backend server\nconst fetchServerCart=useCallback(async authToken=>{// If no auth token is provided, clear server cart and return\nif(!authToken){setServerCart({items:[],totalAmount:0});return;}console.log('AuthContext fetchServerCart: Attempting to fetch cart with token.');try{const response=await fetch(\"\".concat(backendBaseUrl,\"/api/cart\"),{// Using deployed backend URL\nheaders:{'Authorization':\"Bearer \".concat(authToken)// Include JWT token for authentication\n}});if(!response.ok){// If the response is 401 (Unauthorized), it means the token is invalid or expired\nif(response.status===401){console.warn('AuthContext fetchServerCart: Token invalid/expired, forcing logout.');// Show a modal and then log out the user after they acknowledge\nshowCustomModal('Your session has expired. Please log in again.',()=>{logout();// Calls the logout function defined below\n});}throw new Error(\"HTTP error! status: \".concat(response.status));}const data=await response.json();console.log('AuthContext fetchServerCart: Server cart fetched successfully.',data);setServerCart(data);// Update server cart state\n// After successfully fetching server cart, clear the local cart\nsetLocalCart([]);localStorage.removeItem('localCart');// Also remove from localStorage\n}catch(error){console.error('AuthContext fetchServerCart: Error fetching cart:',error);// Fallback to an empty server cart on error\nsetServerCart({items:[],totalAmount:0});}},[showCustomModal,backendBaseUrl]);// Dependency: backendBaseUrl added\n// Function to merge items from the local (guest) cart into the authenticated user's server cart\nconst mergeLocalCartWithServer=useCallback(async authToken=>{// Only proceed if there are items in the local cart and a token is available\nif(localCart.length===0||!authToken)return;try{console.log('AuthContext mergeLocalCartWithServer: Attempting to merge local cart with server cart...');// Loop through each item in the local cart\nfor(const item of localCart){// Send a POST request to the cart API to add each item\n// The backend should handle updating quantity if the item already exists\nconst response=await fetch(\"\".concat(backendBaseUrl,\"/api/cart\"),{// Using deployed backend URL\nmethod:'POST',headers:{'Content-Type':'application/json','Authorization':\"Bearer \".concat(authToken)},body:JSON.stringify({productId:item.product,quantity:item.quantity})});if(!response.ok){const errorData=await response.json();// Log specific errors for each item without stopping the loop\nconsole.error(\"AuthContext mergeLocalCartWithServer: Error merging item \".concat(item.name,\":\"),errorData.message||response.status);}}// Notify user about successful merge using auto-dismiss modal\nshowCustomModal('Your guest cart has been merged with your account!',()=>{},3000);// Auto-dismiss after 3 seconds\n// Clear local cart and its localStorage entry after all items have been processed\nsetLocalCart([]);localStorage.removeItem('localCart');// Re-fetch the server cart to ensure the frontend reflects the fully merged cart\nfetchServerCart(authToken);}catch(error){console.error('AuthContext mergeLocalCartWithServer: Error during cart merge process:',error);showCustomModal('There was an issue merging your guest cart.');// This one should still require OK click\n}},[localCart,fetchServerCart,showCustomModal,backendBaseUrl]);// Dependencies: backendBaseUrl added\n// Function to fetch the user's wallet balance from the backend\nconst fetchWalletBalance=useCallback(async authToken=>{if(!authToken){// If no token, user is not logged in, so wallet balance is 0\nsetUser(prevUser=>prevUser?_objectSpread(_objectSpread({},prevUser),{},{walletBalance:0}):null);return;}try{const response=await fetch(\"\".concat(backendBaseUrl,\"/api/wallet/balance\"),{headers:{'Authorization':\"Bearer \".concat(authToken)}});if(!response.ok){// If 401, session expired. Handle via logout in fetchServerCart or similar.\n// For now, just log and set balance to 0.\nconsole.error('Failed to fetch wallet balance:',response.status);setUser(prevUser=>prevUser?_objectSpread(_objectSpread({},prevUser),{},{walletBalance:0}):null);return;}const data=await response.json();// Update the user state with the new wallet balance\nsetUser(prevUser=>_objectSpread(_objectSpread({},prevUser),{},{walletBalance:data.walletBalance}));}catch(error){console.error('Error fetching wallet balance:',error);setUser(prevUser=>prevUser?_objectSpread(_objectSpread({},prevUser),{},{walletBalance:0}):null);// Set to 0 on error\n}},[backendBaseUrl]);// Dependency: backendBaseUrl added\n// Effect to manage fetching server cart, merging local cart, and fetching wallet balance\n// whenever the `token` changes (i.e., on login/logout)\nuseEffect(()=>{console.log('AuthProvider useEffect: Token changed. Re-fetching server cart, potentially merging local cart, and fetching wallet balance.');if(token){fetchServerCart(token);mergeLocalCartWithServer(token);fetchWalletBalance(token);// Fetch wallet balance on login\n}else{setServerCart({items:[],totalAmount:0});// Clear server cart state\nsetUser(null);// Ensure user is null on logout\n}},[token,fetchServerCart,mergeLocalCartWithServer,fetchWalletBalance]);// Dependencies for this effect\n// Function to handle user login: sets user data and token in state and localStorage\nconst login=(userData,userToken)=>{setUser(userData);setToken(userToken);localStorage.setItem('token',userToken);localStorage.setItem('user',JSON.stringify(userData));console.log('AuthContext login: User logged in. Context state and localStorage updated.');// Cart fetching and merging, and wallet balance fetching will be handled by the useEffect that depends on `token`\n};// Function to handle user logout: clears user data, token, and server cart from state and localStorage\nconst logout=()=>{console.log('AuthContext logout: User logging out. Clearing context state and localStorage.');setUser(null);setToken(null);setServerCart({items:[],totalAmount:0});// Clear server cart state\nlocalStorage.removeItem('token');localStorage.removeItem('user');// Local cart remains for a guest shopping experience, but can be cleared if desired\n};// Function to add a product to the cart (smartly handles both local and server carts)\nconst addToCart=async function(productId){let quantity=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;let productDetails=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};if(!productId){showCustomModal('Cannot add to cart: Product ID is missing or invalid.');console.error('AuthContext addToCart: productId is undefined or null');return;}if(token){// If user is authenticated, add product to the server cart via API\ntry{const response=await fetch(\"\".concat(backendBaseUrl,\"/api/cart\"),{// Using deployed backend URL\nmethod:'POST',headers:{'Content-Type':'application/json','Authorization':\"Bearer \".concat(token)},body:JSON.stringify({productId,quantity})});if(!response.ok){const errorData=await response.json();throw new Error(errorData.message||\"HTTP error! status: \".concat(response.status));}const updatedCart=await response.json();setServerCart(updatedCart);// Update the server cart state\n// Use auto-dismiss modal for \"Product added to cart!\"\nshowCustomModal('Product added to cart!',()=>{},2000);// Auto-dismiss after 2 seconds\n}catch(error){console.error('AuthContext addToCart: Error adding to server cart:',error);showCustomModal(\"Failed to add to cart: \".concat(error.message));}}else{// If user is not authenticated, manage the cart locally (in memory and localStorage)\nconst existingItemIndex=localCart.findIndex(item=>item.product===productId);let updatedLocalCart;if(existingItemIndex>-1){// If the product already exists in the local cart, update its quantity\nupdatedLocalCart=localCart.map((item,index)=>index===existingItemIndex?_objectSpread(_objectSpread({},item),{},{quantity:item.quantity+quantity}):item);}else{// If the product is new, add it to the local cart\n// Ensure productDetails are provided for local cart display (name, imageUrl, price)\nif(!productDetails.name||!productDetails.price){console.warn('AuthContext addToCart: Missing product details for local cart. Attempting to fetch or using defaults.');try{// Attempt to fetch product details if not provided to make local cart display richer\nconst res=await fetch(\"\".concat(backendBaseUrl,\"/api/products/\").concat(productId));// Using deployed backend URL\nconst productData=await res.json();if(res.ok){productDetails={name:productData.name,imageUrl:productData.imageUrl,price:productData.price};}else{console.error('AuthContext addToCart: Failed to fetch product details for local cart:',productData.message);productDetails={name:'Unknown Product',imageUrl:'',price:0};// Fallback details\n}}catch(fetchErr){console.error('AuthContext addToCart: Error fetching product details for local cart:',fetchErr);productDetails={name:'Unknown Product',imageUrl:'',price:0};// Fallback details\n}}updatedLocalCart=[...localCart,{product:productId,// Store the product ID\nname:productDetails.name,imageUrl:productDetails.imageUrl,price:productDetails.price,quantity:quantity}];}setLocalCart(updatedLocalCart);// Update the local cart state\n// Use auto-dismiss modal for \"Product added to local cart!\"\nshowCustomModal('Product added to local cart!',()=>{},2000);// Auto-dismiss after 2 seconds\n}};// Function to update the quantity of a specific product in the cart\nconst updateCartQuantity=async(productId,quantity)=>{if(quantity<0){showCustomModal('Quantity cannot be negative.');return;}if(token){// If authenticated, update quantity on the server via API\ntry{const response=await fetch(\"\".concat(backendBaseUrl,\"/api/cart/\").concat(productId),{// Using deployed backend URL\nmethod:'PUT',headers:{'Content-Type':'application/json','Authorization':\"Bearer \".concat(token)},body:JSON.stringify({quantity})});if(!response.ok){const errorData=await response.json();throw new Error(errorData.message||\"HTTP error! status: \".concat(response.status));}const updatedCart=await response.json();setServerCart(updatedCart);// Update server cart state\n}catch(error){console.error('AuthContext updateCartQuantity: Error updating server cart quantity:',error);showCustomModal(\"Failed to update quantity: \".concat(error.message));}}else{// If unauthenticated, update quantity in the local cart\nconst updatedLocalCart=localCart.map(item=>item.product===productId?_objectSpread(_objectSpread({},item),{},{quantity:quantity}):item).filter(item=>item.quantity>0);// Remove item from local cart if quantity becomes 0\nsetLocalCart(updatedLocalCart);// Update local cart state\n}};// Function to remove a specific product from the cart\nconst removeFromCart=async productId=>{if(token){// If authenticated, remove from server cart via API\ntry{const response=await fetch(\"\".concat(backendBaseUrl,\"/api/cart/\").concat(productId),{// Using deployed backend URL\nmethod:'DELETE',headers:{'Authorization':\"Bearer \".concat(token)}});if(!response.ok){const errorData=await response.json();throw new Error(errorData.message||\"HTTP error! status: \".concat(response.status));}const updatedCart=await response.json();setServerCart(updatedCart);// Update server cart state\nshowCustomModal('Product removed from cart.');// This should still require OK click\n}catch(error){console.error('AuthContext removeFromCart: Error removing from server cart:',error);showCustomModal(\"Failed to remove from cart: \".concat(error.message));}}else{// If unauthenticated, remove from local cart\nconst updatedLocalCart=localCart.filter(item=>item.product!==productId);setLocalCart(updatedLocalCart);// Update local cart state\nshowCustomModal('Product removed from local cart.');// This should still require OK click\n}};// Function to clear all items from the cart\nconst clearCart=async()=>{if(token){// If authenticated, clear server cart via API\ntry{const response=await fetch(\"\".concat(backendBaseUrl,\"/api/cart\"),{// Using deployed backend URL\nmethod:'DELETE',headers:{'Authorization':\"Bearer \".concat(token)}});if(!response.ok){const errorData=await response.json();throw new Error(errorData.message||\"HTTP error! status: \".concat(response.status));}const clearedCart=await response.json();setServerCart(clearedCart);// Update server cart state to empty\nshowCustomModal('Cart cleared successfully.');// This should still require OK click\n}catch(error){console.error('AuthContext clearCart: Error clearing server cart:',error);showCustomModal(\"Failed to clear cart: \".concat(error.message));}}else{// If unauthenticated, clear local cart\nsetLocalCart([]);// Set local cart to empty array\nshowCustomModal('Local cart cleared successfully.');// This should still require OK click\n}};// Determine which cart to display based on authentication status\nconst currentDisplayCart=token?serverCart:{items:localCart,// Calculate total amount for local cart items dynamically\ntotalAmount:localCart.reduce((acc,item)=>acc+item.price*item.quantity,0)};// The object containing all values and functions that will be exposed through the context\nconst authContextValue={user,// Currently authenticated user data\ntoken,// JWT token\nlogin,// Function to log in a user\nlogout,// Function to log out a user\ncart:currentDisplayCart,// The active cart (local or server)\naddToCart,// Function to add product to cart\nupdateCartQuantity,// Function to update product quantity in cart\nremoveFromCart,// Function to remove product from cart\nclearCart,// Function to clear the entire cart\nfetchServerCart,// Function to manually fetch server cart (internal use mostly)\nshowCustomModal,// Utility function to show custom alert/confirm modals\nfetchWalletBalance// NEW: Function to fetch wallet balance\n};return(/*#__PURE__*/// Provide the constructed context value to all child components\n_jsx(AuthContext.Provider,{value:authContextValue,children:children}));}// Custom hook to easily consume the AuthContext in any functional component\nexport const useAuth=()=>{const context=useContext(AuthContext);// Throw an error if useAuth is used outside of an AuthProvider, helping debugging\nif(context===undefined){throw new Error('useAuth must be used within an AuthProvider');}return context;// Return the context value\n};","map":{"version":3,"names":["React","useState","useEffect","useCallback","createContext","useContext","jsx","_jsx","AuthContext","AuthProvider","_ref","children","user","setUser","token","setToken","localCart","setLocalCart","serverCart","setServerCart","items","totalAmount","backendBaseUrl","showCustomModal","message","onConfirm","arguments","length","undefined","autoDismissDuration","existingModal","document","getElementById","body","removeChild","modalElement","createElement","id","className","modalContentHtml","concat","innerHTML","appendChild","setTimeout","contains","confirmBtn","querySelector","addEventListener","storedToken","localStorage","getItem","storedUser","storedLocalCart","JSON","parse","e","console","error","removeItem","parsedCart","Array","isArray","warn","setItem","stringify","fetchServerCart","authToken","log","response","fetch","headers","ok","status","logout","Error","data","json","mergeLocalCartWithServer","item","method","productId","product","quantity","errorData","name","fetchWalletBalance","prevUser","_objectSpread","walletBalance","login","userData","userToken","addToCart","productDetails","updatedCart","existingItemIndex","findIndex","updatedLocalCart","map","index","price","res","productData","imageUrl","fetchErr","updateCartQuantity","filter","removeFromCart","clearCart","clearedCart","currentDisplayCart","reduce","acc","authContextValue","cart","Provider","value","useAuth","context"],"sources":["C:/Users/HP/OneDrive/Desktop/SUCCESSFUL PROJECTS/Jora mall/frontend/client/src/AuthContext.js"],"sourcesContent":["// client/src/AuthContext.js\r\nimport React, { useState, useEffect, useCallback, createContext, useContext } from 'react';\r\n\r\n// Create and EXPORT Auth Context to be consumed by other components\r\nexport const AuthContext = createContext(null);\r\n\r\n// Auth Provider component that wraps your application and provides global state\r\nexport function AuthProvider({ children }) {\r\n  // State for the authenticated user data\r\n  const [user, setUser] = useState(null);\r\n  // State for the JWT authentication token\r\n  const [token, setToken] = useState(null);\r\n  // State for the local cart (used when user is not authenticated)\r\n  const [localCart, setLocalCart] = useState([]);\r\n  // State for the server cart (used when user is authenticated)\r\n  const [serverCart, setServerCart] = useState({ items: [], totalAmount: 0 });\r\n\r\n  // --- IMPORTANT: This URL is for your DEPLOYED backend ---\r\n  // If you redeploy your backend and its URL changes, you MUST update it here.\r\n  const backendBaseUrl = 'https://jora-mall-backend.onrender.com';\r\n\r\n  // Custom modal function to display messages to the user.\r\n  // Now accepts an optional `autoDismissDuration` (in ms) to make it disappear automatically.\r\n  const showCustomModal = useCallback((message, onConfirm = () => {}, autoDismissDuration = 0) => {\r\n    // Remove any existing modals to prevent stacking\r\n    const existingModal = document.getElementById('custom-modal-container');\r\n    if (existingModal) {\r\n      document.body.removeChild(existingModal);\r\n    }\r\n\r\n    // Create the modal container element\r\n    const modalElement = document.createElement('div');\r\n    modalElement.id = 'custom-modal-container'; // Assign an ID for easy removal\r\n    modalElement.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';\r\n\r\n    let modalContentHtml = `\r\n      <div class=\"bg-white p-6 rounded-lg shadow-xl text-gray-800 max-w-sm w-full mx-4 text-center\">\r\n        <p class=\"text-lg font-semibold mb-4\">${message}</p>\r\n    `;\r\n\r\n    // Only add an \"OK\" button if autoDismissDuration is 0 (i.e., manual dismissal)\r\n    if (autoDismissDuration === 0) {\r\n      modalContentHtml += `\r\n        <button id=\"modal-confirm-btn\" class=\"bg-blue-600 text-white px-5 py-2 rounded-md hover:bg-blue-700 transition-colors\">OK</button>\r\n      `;\r\n    }\r\n\r\n    modalContentHtml += `</div>`;\r\n    modalElement.innerHTML = modalContentHtml;\r\n\r\n    // Append the modal to the document body\r\n    document.body.appendChild(modalElement);\r\n\r\n    // If autoDismissDuration is provided, set a timeout to remove the modal\r\n    if (autoDismissDuration > 0) {\r\n      setTimeout(() => {\r\n        if (document.body.contains(modalElement)) {\r\n          document.body.removeChild(modalElement);\r\n        }\r\n        onConfirm(); // Execute callback even for auto-dismissed modals\r\n      }, autoDismissDuration);\r\n    } else {\r\n      // If no autoDismissDuration, set up click listener for the \"OK\" button\r\n      const confirmBtn = modalElement.querySelector('#modal-confirm-btn');\r\n      if (confirmBtn) {\r\n        confirmBtn.addEventListener('click', () => {\r\n          if (document.body.contains(modalElement)) {\r\n            document.body.removeChild(modalElement);\r\n          }\r\n          onConfirm();\r\n        });\r\n      }\r\n    }\r\n  }, []); // Empty dependency array means this function definition is stable and won't change\r\n\r\n  // Effect to load initial state from localStorage when the component mounts\r\n  useEffect(() => {\r\n    const storedToken = localStorage.getItem('token');\r\n    const storedUser = localStorage.getItem('user');\r\n    const storedLocalCart = localStorage.getItem('localCart');\r\n\r\n    // Restore user and token if found in localStorage\r\n    if (storedToken && storedUser) {\r\n      try {\r\n        setUser(JSON.parse(storedUser));\r\n        setToken(storedToken);\r\n      } catch (e) {\r\n        console.error(\"AuthContext: Failed to parse stored user data from localStorage\", e);\r\n        // Clear corrupted data to prevent future errors\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('user');\r\n      }\r\n    }\r\n    // Restore local cart if found in localStorage\r\n    if (storedLocalCart) {\r\n      try {\r\n        // Ensure the parsed data is an array before setting\r\n        const parsedCart = JSON.parse(storedLocalCart);\r\n        if (Array.isArray(parsedCart)) {\r\n          setLocalCart(parsedCart);\r\n        } else {\r\n          console.warn(\"AuthContext: Stored local cart was not an array, clearing.\");\r\n          localStorage.removeItem('localCart');\r\n        }\r\n      } catch (e) {\r\n        console.error(\"AuthContext: Failed to parse stored local cart data from localStorage\", e);\r\n        // Clear corrupted data\r\n        localStorage.removeItem('localCart');\r\n      }\r\n    }\r\n  }, []); // Runs only once on component mount\r\n\r\n  // Effect to synchronize the local cart state with localStorage whenever it changes\r\n  useEffect(() => {\r\n    // Only save if localCart is actually an array (to prevent saving initial null/undefined states)\r\n    if (Array.isArray(localCart)) {\r\n      localStorage.setItem('localCart', JSON.stringify(localCart));\r\n    }\r\n  }, [localCart]); // Re-runs whenever localCart state changes\r\n\r\n  // Function to fetch the authenticated user's cart from the backend server\r\n  const fetchServerCart = useCallback(async (authToken) => {\r\n    // If no auth token is provided, clear server cart and return\r\n    if (!authToken) {\r\n      setServerCart({ items: [], totalAmount: 0 });\r\n      return;\r\n    }\r\n    console.log('AuthContext fetchServerCart: Attempting to fetch cart with token.');\r\n    try {\r\n      const response = await fetch(`${backendBaseUrl}/api/cart`, { // Using deployed backend URL\r\n        headers: {\r\n          'Authorization': `Bearer ${authToken}`, // Include JWT token for authentication\r\n        },\r\n      });\r\n      if (!response.ok) {\r\n        // If the response is 401 (Unauthorized), it means the token is invalid or expired\r\n        if (response.status === 401) {\r\n          console.warn('AuthContext fetchServerCart: Token invalid/expired, forcing logout.');\r\n          // Show a modal and then log out the user after they acknowledge\r\n          showCustomModal('Your session has expired. Please log in again.', () => {\r\n            logout(); // Calls the logout function defined below\r\n          });\r\n        }\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      const data = await response.json();\r\n      console.log('AuthContext fetchServerCart: Server cart fetched successfully.', data);\r\n      setServerCart(data); // Update server cart state\r\n      // After successfully fetching server cart, clear the local cart\r\n      setLocalCart([]);\r\n      localStorage.removeItem('localCart'); // Also remove from localStorage\r\n    } catch (error) {\r\n      console.error('AuthContext fetchServerCart: Error fetching cart:', error);\r\n      // Fallback to an empty server cart on error\r\n      setServerCart({ items: [], totalAmount: 0 });\r\n    }\r\n  }, [showCustomModal, backendBaseUrl]); // Dependency: backendBaseUrl added\r\n\r\n  // Function to merge items from the local (guest) cart into the authenticated user's server cart\r\n  const mergeLocalCartWithServer = useCallback(async (authToken) => {\r\n    // Only proceed if there are items in the local cart and a token is available\r\n    if (localCart.length === 0 || !authToken) return;\r\n\r\n    try {\r\n      console.log('AuthContext mergeLocalCartWithServer: Attempting to merge local cart with server cart...');\r\n      // Loop through each item in the local cart\r\n      for (const item of localCart) {\r\n        // Send a POST request to the cart API to add each item\r\n        // The backend should handle updating quantity if the item already exists\r\n        const response = await fetch(`${backendBaseUrl}/api/cart`, { // Using deployed backend URL\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${authToken}`,\r\n          },\r\n          body: JSON.stringify({ productId: item.product, quantity: item.quantity }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          const errorData = await response.json();\r\n          // Log specific errors for each item without stopping the loop\r\n          console.error(`AuthContext mergeLocalCartWithServer: Error merging item ${item.name}:`, errorData.message || response.status);\r\n        }\r\n      }\r\n      // Notify user about successful merge using auto-dismiss modal\r\n      showCustomModal('Your guest cart has been merged with your account!', () => {}, 3000); // Auto-dismiss after 3 seconds\r\n      // Clear local cart and its localStorage entry after all items have been processed\r\n      setLocalCart([]);\r\n      localStorage.removeItem('localCart');\r\n      // Re-fetch the server cart to ensure the frontend reflects the fully merged cart\r\n      fetchServerCart(authToken);\r\n    } catch (error) {\r\n      console.error('AuthContext mergeLocalCartWithServer: Error during cart merge process:', error);\r\n      showCustomModal('There was an issue merging your guest cart.'); // This one should still require OK click\r\n    }\r\n  }, [localCart, fetchServerCart, showCustomModal, backendBaseUrl]); // Dependencies: backendBaseUrl added\r\n\r\n  // Function to fetch the user's wallet balance from the backend\r\n  const fetchWalletBalance = useCallback(async (authToken) => {\r\n    if (!authToken) {\r\n      // If no token, user is not logged in, so wallet balance is 0\r\n      setUser(prevUser => (prevUser ? { ...prevUser, walletBalance: 0 } : null));\r\n      return;\r\n    }\r\n    try {\r\n      const response = await fetch(`${backendBaseUrl}/api/wallet/balance`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${authToken}`,\r\n        },\r\n      });\r\n      if (!response.ok) {\r\n        // If 401, session expired. Handle via logout in fetchServerCart or similar.\r\n        // For now, just log and set balance to 0.\r\n        console.error('Failed to fetch wallet balance:', response.status);\r\n        setUser(prevUser => (prevUser ? { ...prevUser, walletBalance: 0 } : null));\r\n        return;\r\n      }\r\n      const data = await response.json();\r\n      // Update the user state with the new wallet balance\r\n      setUser(prevUser => ({\r\n        ...prevUser,\r\n        walletBalance: data.walletBalance,\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error fetching wallet balance:', error);\r\n      setUser(prevUser => (prevUser ? { ...prevUser, walletBalance: 0 } : null)); // Set to 0 on error\r\n    }\r\n  }, [backendBaseUrl]); // Dependency: backendBaseUrl added\r\n\r\n  // Effect to manage fetching server cart, merging local cart, and fetching wallet balance\r\n  // whenever the `token` changes (i.e., on login/logout)\r\n  useEffect(() => {\r\n    console.log('AuthProvider useEffect: Token changed. Re-fetching server cart, potentially merging local cart, and fetching wallet balance.');\r\n    if (token) {\r\n      fetchServerCart(token);\r\n      mergeLocalCartWithServer(token);\r\n      fetchWalletBalance(token); // Fetch wallet balance on login\r\n    } else {\r\n      setServerCart({ items: [], totalAmount: 0 }); // Clear server cart state\r\n      setUser(null); // Ensure user is null on logout\r\n    }\r\n  }, [token, fetchServerCart, mergeLocalCartWithServer, fetchWalletBalance]); // Dependencies for this effect\r\n\r\n  // Function to handle user login: sets user data and token in state and localStorage\r\n  const login = (userData, userToken) => {\r\n    setUser(userData);\r\n    setToken(userToken);\r\n    localStorage.setItem('token', userToken);\r\n    localStorage.setItem('user', JSON.stringify(userData));\r\n    console.log('AuthContext login: User logged in. Context state and localStorage updated.');\r\n    // Cart fetching and merging, and wallet balance fetching will be handled by the useEffect that depends on `token`\r\n  };\r\n\r\n  // Function to handle user logout: clears user data, token, and server cart from state and localStorage\r\n  const logout = () => {\r\n    console.log('AuthContext logout: User logging out. Clearing context state and localStorage.');\r\n    setUser(null);\r\n    setToken(null);\r\n    setServerCart({ items: [], totalAmount: 0 }); // Clear server cart state\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    // Local cart remains for a guest shopping experience, but can be cleared if desired\r\n  };\r\n\r\n  // Function to add a product to the cart (smartly handles both local and server carts)\r\n  const addToCart = async (productId, quantity = 1, productDetails = {}) => {\r\n    if (!productId) {\r\n      showCustomModal('Cannot add to cart: Product ID is missing or invalid.');\r\n      console.error('AuthContext addToCart: productId is undefined or null');\r\n      return;\r\n    }\r\n\r\n    if (token) {\r\n      // If user is authenticated, add product to the server cart via API\r\n      try {\r\n        const response = await fetch(`${backendBaseUrl}/api/cart`, { // Using deployed backend URL\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${token}`,\r\n          },\r\n          body: JSON.stringify({ productId, quantity }),\r\n        });\r\n        if (!response.ok) {\r\n          const errorData = await response.json();\r\n          throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\r\n        }\r\n        const updatedCart = await response.json();\r\n        setServerCart(updatedCart); // Update the server cart state\r\n        // Use auto-dismiss modal for \"Product added to cart!\"\r\n        showCustomModal('Product added to cart!', () => {}, 2000); // Auto-dismiss after 2 seconds\r\n      } catch (error) {\r\n        console.error('AuthContext addToCart: Error adding to server cart:', error);\r\n        showCustomModal(`Failed to add to cart: ${error.message}`);\r\n      }\r\n    } else {\r\n      // If user is not authenticated, manage the cart locally (in memory and localStorage)\r\n      const existingItemIndex = localCart.findIndex(item => item.product === productId);\r\n      let updatedLocalCart;\r\n\r\n      if (existingItemIndex > -1) {\r\n        // If the product already exists in the local cart, update its quantity\r\n        updatedLocalCart = localCart.map((item, index) =>\r\n          index === existingItemIndex ? { ...item, quantity: item.quantity + quantity } : item\r\n        );\r\n      } else {\r\n        // If the product is new, add it to the local cart\r\n        // Ensure productDetails are provided for local cart display (name, imageUrl, price)\r\n        if (!productDetails.name || !productDetails.price) {\r\n          console.warn('AuthContext addToCart: Missing product details for local cart. Attempting to fetch or using defaults.');\r\n          try {\r\n            // Attempt to fetch product details if not provided to make local cart display richer\r\n            const res = await fetch(`${backendBaseUrl}/api/products/${productId}`); // Using deployed backend URL\r\n            const productData = await res.json();\r\n            if (res.ok) {\r\n              productDetails = {\r\n                name: productData.name,\r\n                imageUrl: productData.imageUrl,\r\n                price: productData.price,\r\n              };\r\n            } else {\r\n              console.error('AuthContext addToCart: Failed to fetch product details for local cart:', productData.message);\r\n              productDetails = { name: 'Unknown Product', imageUrl: '', price: 0 }; // Fallback details\r\n            }\r\n          } catch (fetchErr) {\r\n            console.error('AuthContext addToCart: Error fetching product details for local cart:', fetchErr);\r\n            productDetails = { name: 'Unknown Product', imageUrl: '', price: 0 }; // Fallback details\r\n          }\r\n        }\r\n\r\n        updatedLocalCart = [\r\n          ...localCart,\r\n          {\r\n            product: productId, // Store the product ID\r\n            name: productDetails.name,\r\n            imageUrl: productDetails.imageUrl,\r\n            price: productDetails.price,\r\n            quantity: quantity,\r\n          },\r\n        ];\r\n      }\r\n      setLocalCart(updatedLocalCart); // Update the local cart state\r\n      // Use auto-dismiss modal for \"Product added to local cart!\"\r\n      showCustomModal('Product added to local cart!', () => {}, 2000); // Auto-dismiss after 2 seconds\r\n    }\r\n  };\r\n\r\n  // Function to update the quantity of a specific product in the cart\r\n  const updateCartQuantity = async (productId, quantity) => {\r\n    if (quantity < 0) {\r\n      showCustomModal('Quantity cannot be negative.');\r\n      return;\r\n    }\r\n\r\n    if (token) {\r\n      // If authenticated, update quantity on the server via API\r\n      try {\r\n        const response = await fetch(`${backendBaseUrl}/api/cart/${productId}`, { // Using deployed backend URL\r\n          method: 'PUT',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${token}`,\r\n          },\r\n          body: JSON.stringify({ quantity }),\r\n        });\r\n        if (!response.ok) {\r\n          const errorData = await response.json();\r\n          throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\r\n        }\r\n        const updatedCart = await response.json();\r\n        setServerCart(updatedCart); // Update server cart state\r\n      } catch (error) {\r\n        console.error('AuthContext updateCartQuantity: Error updating server cart quantity:', error);\r\n        showCustomModal(`Failed to update quantity: ${error.message}`);\r\n      }\r\n    } else {\r\n      // If unauthenticated, update quantity in the local cart\r\n      const updatedLocalCart = localCart.map(item =>\r\n        item.product === productId ? { ...item, quantity: quantity } : item\r\n      ).filter(item => item.quantity > 0); // Remove item from local cart if quantity becomes 0\r\n\r\n      setLocalCart(updatedLocalCart); // Update local cart state\r\n    }\r\n  };\r\n\r\n  // Function to remove a specific product from the cart\r\n  const removeFromCart = async (productId) => {\r\n    if (token) {\r\n      // If authenticated, remove from server cart via API\r\n      try {\r\n        const response = await fetch(`${backendBaseUrl}/api/cart/${productId}`, { // Using deployed backend URL\r\n          method: 'DELETE',\r\n          headers: {\r\n            'Authorization': `Bearer ${token}`,\r\n          },\r\n        });\r\n        if (!response.ok) {\r\n          const errorData = await response.json();\r\n          throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\r\n        }\r\n        const updatedCart = await response.json();\r\n        setServerCart(updatedCart); // Update server cart state\r\n        showCustomModal('Product removed from cart.'); // This should still require OK click\r\n      } catch (error) {\r\n        console.error('AuthContext removeFromCart: Error removing from server cart:', error);\r\n        showCustomModal(`Failed to remove from cart: ${error.message}`);\r\n      }\r\n    } else {\r\n      // If unauthenticated, remove from local cart\r\n      const updatedLocalCart = localCart.filter(item => item.product !== productId);\r\n      setLocalCart(updatedLocalCart); // Update local cart state\r\n      showCustomModal('Product removed from local cart.'); // This should still require OK click\r\n    }\r\n  };\r\n\r\n  // Function to clear all items from the cart\r\n  const clearCart = async () => {\r\n    if (token) {\r\n      // If authenticated, clear server cart via API\r\n      try {\r\n        const response = await fetch(`${backendBaseUrl}/api/cart`, { // Using deployed backend URL\r\n          method: 'DELETE',\r\n          headers: {\r\n            'Authorization': `Bearer ${token}`,\r\n          },\r\n        });\r\n        if (!response.ok) {\r\n          const errorData = await response.json();\r\n          throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\r\n        }\r\n        const clearedCart = await response.json();\r\n        setServerCart(clearedCart); // Update server cart state to empty\r\n        showCustomModal('Cart cleared successfully.'); // This should still require OK click\r\n      } catch (error) {\r\n        console.error('AuthContext clearCart: Error clearing server cart:', error);\r\n        showCustomModal(`Failed to clear cart: ${error.message}`);\r\n      }\r\n    } else {\r\n      // If unauthenticated, clear local cart\r\n      setLocalCart([]); // Set local cart to empty array\r\n      showCustomModal('Local cart cleared successfully.'); // This should still require OK click\r\n    }\r\n  };\r\n\r\n  // Determine which cart to display based on authentication status\r\n  const currentDisplayCart = token ? serverCart : {\r\n    items: localCart,\r\n    // Calculate total amount for local cart items dynamically\r\n    totalAmount: localCart.reduce((acc, item) => acc + (item.price * item.quantity), 0)\r\n  };\r\n\r\n  // The object containing all values and functions that will be exposed through the context\r\n  const authContextValue = {\r\n    user,             // Currently authenticated user data\r\n    token,            // JWT token\r\n    login,            // Function to log in a user\r\n    logout,           // Function to log out a user\r\n    cart: currentDisplayCart, // The active cart (local or server)\r\n    addToCart,        // Function to add product to cart\r\n    updateCartQuantity, // Function to update product quantity in cart\r\n    removeFromCart,   // Function to remove product from cart\r\n    clearCart,        // Function to clear the entire cart\r\n    fetchServerCart,  // Function to manually fetch server cart (internal use mostly)\r\n    showCustomModal,  // Utility function to show custom alert/confirm modals\r\n    fetchWalletBalance // NEW: Function to fetch wallet balance\r\n  };\r\n\r\n  return (\r\n    // Provide the constructed context value to all child components\r\n    <AuthContext.Provider value={authContextValue}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n\r\n// Custom hook to easily consume the AuthContext in any functional component\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  // Throw an error if useAuth is used outside of an AuthProvider, helping debugging\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context; // Return the context value\r\n};\r\n"],"mappings":"+JAAA;AACA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,CAAEC,WAAW,CAAEC,aAAa,CAAEC,UAAU,KAAQ,OAAO,CAE1F;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBACA,MAAO,MAAM,CAAAC,WAAW,cAAGJ,aAAa,CAAC,IAAI,CAAC,CAE9C;AACA,MAAO,SAAS,CAAAK,YAAYA,CAAAC,IAAA,CAAe,IAAd,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACvC;AACA,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAC,CAAGZ,QAAQ,CAAC,IAAI,CAAC,CACtC;AACA,KAAM,CAACa,KAAK,CAAEC,QAAQ,CAAC,CAAGd,QAAQ,CAAC,IAAI,CAAC,CACxC;AACA,KAAM,CAACe,SAAS,CAAEC,YAAY,CAAC,CAAGhB,QAAQ,CAAC,EAAE,CAAC,CAC9C;AACA,KAAM,CAACiB,UAAU,CAAEC,aAAa,CAAC,CAAGlB,QAAQ,CAAC,CAAEmB,KAAK,CAAE,EAAE,CAAEC,WAAW,CAAE,CAAE,CAAC,CAAC,CAE3E;AACA;AACA,KAAM,CAAAC,cAAc,CAAG,wCAAwC,CAE/D;AACA;AACA,KAAM,CAAAC,eAAe,CAAGpB,WAAW,CAAC,SAACqB,OAAO,CAAoD,IAAlD,CAAAC,SAAS,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAM,CAAC,CAAC,IAAE,CAAAG,mBAAmB,CAAAH,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CACzF;AACA,KAAM,CAAAI,aAAa,CAAGC,QAAQ,CAACC,cAAc,CAAC,wBAAwB,CAAC,CACvE,GAAIF,aAAa,CAAE,CACjBC,QAAQ,CAACE,IAAI,CAACC,WAAW,CAACJ,aAAa,CAAC,CAC1C,CAEA;AACA,KAAM,CAAAK,YAAY,CAAGJ,QAAQ,CAACK,aAAa,CAAC,KAAK,CAAC,CAClDD,YAAY,CAACE,EAAE,CAAG,wBAAwB,CAAE;AAC5CF,YAAY,CAACG,SAAS,CAAG,4EAA4E,CAErG,GAAI,CAAAC,gBAAgB,8JAAAC,MAAA,CAEwBhB,OAAO,cAClD,CAED;AACA,GAAIK,mBAAmB,GAAK,CAAC,CAAE,CAC7BU,gBAAgB,4JAEf,CACH,CAEAA,gBAAgB,UAAY,CAC5BJ,YAAY,CAACM,SAAS,CAAGF,gBAAgB,CAEzC;AACAR,QAAQ,CAACE,IAAI,CAACS,WAAW,CAACP,YAAY,CAAC,CAEvC;AACA,GAAIN,mBAAmB,CAAG,CAAC,CAAE,CAC3Bc,UAAU,CAAC,IAAM,CACf,GAAIZ,QAAQ,CAACE,IAAI,CAACW,QAAQ,CAACT,YAAY,CAAC,CAAE,CACxCJ,QAAQ,CAACE,IAAI,CAACC,WAAW,CAACC,YAAY,CAAC,CACzC,CACAV,SAAS,CAAC,CAAC,CAAE;AACf,CAAC,CAAEI,mBAAmB,CAAC,CACzB,CAAC,IAAM,CACL;AACA,KAAM,CAAAgB,UAAU,CAAGV,YAAY,CAACW,aAAa,CAAC,oBAAoB,CAAC,CACnE,GAAID,UAAU,CAAE,CACdA,UAAU,CAACE,gBAAgB,CAAC,OAAO,CAAE,IAAM,CACzC,GAAIhB,QAAQ,CAACE,IAAI,CAACW,QAAQ,CAACT,YAAY,CAAC,CAAE,CACxCJ,QAAQ,CAACE,IAAI,CAACC,WAAW,CAACC,YAAY,CAAC,CACzC,CACAV,SAAS,CAAC,CAAC,CACb,CAAC,CAAC,CACJ,CACF,CACF,CAAC,CAAE,EAAE,CAAC,CAAE;AAER;AACAvB,SAAS,CAAC,IAAM,CACd,KAAM,CAAA8C,WAAW,CAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CACjD,KAAM,CAAAC,UAAU,CAAGF,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAC/C,KAAM,CAAAE,eAAe,CAAGH,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAEzD;AACA,GAAIF,WAAW,EAAIG,UAAU,CAAE,CAC7B,GAAI,CACFtC,OAAO,CAACwC,IAAI,CAACC,KAAK,CAACH,UAAU,CAAC,CAAC,CAC/BpC,QAAQ,CAACiC,WAAW,CAAC,CACvB,CAAE,MAAOO,CAAC,CAAE,CACVC,OAAO,CAACC,KAAK,CAAC,iEAAiE,CAAEF,CAAC,CAAC,CACnF;AACAN,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC,CAChCT,YAAY,CAACS,UAAU,CAAC,MAAM,CAAC,CACjC,CACF,CACA;AACA,GAAIN,eAAe,CAAE,CACnB,GAAI,CACF;AACA,KAAM,CAAAO,UAAU,CAAGN,IAAI,CAACC,KAAK,CAACF,eAAe,CAAC,CAC9C,GAAIQ,KAAK,CAACC,OAAO,CAACF,UAAU,CAAC,CAAE,CAC7B1C,YAAY,CAAC0C,UAAU,CAAC,CAC1B,CAAC,IAAM,CACLH,OAAO,CAACM,IAAI,CAAC,4DAA4D,CAAC,CAC1Eb,YAAY,CAACS,UAAU,CAAC,WAAW,CAAC,CACtC,CACF,CAAE,MAAOH,CAAC,CAAE,CACVC,OAAO,CAACC,KAAK,CAAC,uEAAuE,CAAEF,CAAC,CAAC,CACzF;AACAN,YAAY,CAACS,UAAU,CAAC,WAAW,CAAC,CACtC,CACF,CACF,CAAC,CAAE,EAAE,CAAC,CAAE;AAER;AACAxD,SAAS,CAAC,IAAM,CACd;AACA,GAAI0D,KAAK,CAACC,OAAO,CAAC7C,SAAS,CAAC,CAAE,CAC5BiC,YAAY,CAACc,OAAO,CAAC,WAAW,CAAEV,IAAI,CAACW,SAAS,CAAChD,SAAS,CAAC,CAAC,CAC9D,CACF,CAAC,CAAE,CAACA,SAAS,CAAC,CAAC,CAAE;AAEjB;AACA,KAAM,CAAAiD,eAAe,CAAG9D,WAAW,CAAC,KAAO,CAAA+D,SAAS,EAAK,CACvD;AACA,GAAI,CAACA,SAAS,CAAE,CACd/C,aAAa,CAAC,CAAEC,KAAK,CAAE,EAAE,CAAEC,WAAW,CAAE,CAAE,CAAC,CAAC,CAC5C,OACF,CACAmC,OAAO,CAACW,GAAG,CAAC,mEAAmE,CAAC,CAChF,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAA7B,MAAA,CAAIlB,cAAc,cAAa,CAAE;AAC3DgD,OAAO,CAAE,CACP,eAAe,WAAA9B,MAAA,CAAY0B,SAAS,CAAI;AAC1C,CACF,CAAC,CAAC,CACF,GAAI,CAACE,QAAQ,CAACG,EAAE,CAAE,CAChB;AACA,GAAIH,QAAQ,CAACI,MAAM,GAAK,GAAG,CAAE,CAC3BhB,OAAO,CAACM,IAAI,CAAC,qEAAqE,CAAC,CACnF;AACAvC,eAAe,CAAC,gDAAgD,CAAE,IAAM,CACtEkD,MAAM,CAAC,CAAC,CAAE;AACZ,CAAC,CAAC,CACJ,CACA,KAAM,IAAI,CAAAC,KAAK,wBAAAlC,MAAA,CAAwB4B,QAAQ,CAACI,MAAM,CAAE,CAAC,CAC3D,CACA,KAAM,CAAAG,IAAI,CAAG,KAAM,CAAAP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAClCpB,OAAO,CAACW,GAAG,CAAC,gEAAgE,CAAEQ,IAAI,CAAC,CACnFxD,aAAa,CAACwD,IAAI,CAAC,CAAE;AACrB;AACA1D,YAAY,CAAC,EAAE,CAAC,CAChBgC,YAAY,CAACS,UAAU,CAAC,WAAW,CAAC,CAAE;AACxC,CAAE,MAAOD,KAAK,CAAE,CACdD,OAAO,CAACC,KAAK,CAAC,mDAAmD,CAAEA,KAAK,CAAC,CACzE;AACAtC,aAAa,CAAC,CAAEC,KAAK,CAAE,EAAE,CAAEC,WAAW,CAAE,CAAE,CAAC,CAAC,CAC9C,CACF,CAAC,CAAE,CAACE,eAAe,CAAED,cAAc,CAAC,CAAC,CAAE;AAEvC;AACA,KAAM,CAAAuD,wBAAwB,CAAG1E,WAAW,CAAC,KAAO,CAAA+D,SAAS,EAAK,CAChE;AACA,GAAIlD,SAAS,CAACW,MAAM,GAAK,CAAC,EAAI,CAACuC,SAAS,CAAE,OAE1C,GAAI,CACFV,OAAO,CAACW,GAAG,CAAC,0FAA0F,CAAC,CACvG;AACA,IAAK,KAAM,CAAAW,IAAI,GAAI,CAAA9D,SAAS,CAAE,CAC5B;AACA;AACA,KAAM,CAAAoD,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAA7B,MAAA,CAAIlB,cAAc,cAAa,CAAE;AAC3DyD,MAAM,CAAE,MAAM,CACdT,OAAO,CAAE,CACP,cAAc,CAAE,kBAAkB,CAClC,eAAe,WAAA9B,MAAA,CAAY0B,SAAS,CACtC,CAAC,CACDjC,IAAI,CAAEoB,IAAI,CAACW,SAAS,CAAC,CAAEgB,SAAS,CAAEF,IAAI,CAACG,OAAO,CAAEC,QAAQ,CAAEJ,IAAI,CAACI,QAAS,CAAC,CAC3E,CAAC,CAAC,CAEF,GAAI,CAACd,QAAQ,CAACG,EAAE,CAAE,CAChB,KAAM,CAAAY,SAAS,CAAG,KAAM,CAAAf,QAAQ,CAACQ,IAAI,CAAC,CAAC,CACvC;AACApB,OAAO,CAACC,KAAK,6DAAAjB,MAAA,CAA6DsC,IAAI,CAACM,IAAI,MAAKD,SAAS,CAAC3D,OAAO,EAAI4C,QAAQ,CAACI,MAAM,CAAC,CAC/H,CACF,CACA;AACAjD,eAAe,CAAC,oDAAoD,CAAE,IAAM,CAAC,CAAC,CAAE,IAAI,CAAC,CAAE;AACvF;AACAN,YAAY,CAAC,EAAE,CAAC,CAChBgC,YAAY,CAACS,UAAU,CAAC,WAAW,CAAC,CACpC;AACAO,eAAe,CAACC,SAAS,CAAC,CAC5B,CAAE,MAAOT,KAAK,CAAE,CACdD,OAAO,CAACC,KAAK,CAAC,wEAAwE,CAAEA,KAAK,CAAC,CAC9FlC,eAAe,CAAC,6CAA6C,CAAC,CAAE;AAClE,CACF,CAAC,CAAE,CAACP,SAAS,CAAEiD,eAAe,CAAE1C,eAAe,CAAED,cAAc,CAAC,CAAC,CAAE;AAEnE;AACA,KAAM,CAAA+D,kBAAkB,CAAGlF,WAAW,CAAC,KAAO,CAAA+D,SAAS,EAAK,CAC1D,GAAI,CAACA,SAAS,CAAE,CACd;AACArD,OAAO,CAACyE,QAAQ,EAAKA,QAAQ,CAAAC,aAAA,CAAAA,aAAA,IAAQD,QAAQ,MAAEE,aAAa,CAAE,CAAC,GAAK,IAAK,CAAC,CAC1E,OACF,CACA,GAAI,CACF,KAAM,CAAApB,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAA7B,MAAA,CAAIlB,cAAc,wBAAuB,CACnEgD,OAAO,CAAE,CACP,eAAe,WAAA9B,MAAA,CAAY0B,SAAS,CACtC,CACF,CAAC,CAAC,CACF,GAAI,CAACE,QAAQ,CAACG,EAAE,CAAE,CAChB;AACA;AACAf,OAAO,CAACC,KAAK,CAAC,iCAAiC,CAAEW,QAAQ,CAACI,MAAM,CAAC,CACjE3D,OAAO,CAACyE,QAAQ,EAAKA,QAAQ,CAAAC,aAAA,CAAAA,aAAA,IAAQD,QAAQ,MAAEE,aAAa,CAAE,CAAC,GAAK,IAAK,CAAC,CAC1E,OACF,CACA,KAAM,CAAAb,IAAI,CAAG,KAAM,CAAAP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAClC;AACA/D,OAAO,CAACyE,QAAQ,EAAAC,aAAA,CAAAA,aAAA,IACXD,QAAQ,MACXE,aAAa,CAAEb,IAAI,CAACa,aAAa,EACjC,CAAC,CACL,CAAE,MAAO/B,KAAK,CAAE,CACdD,OAAO,CAACC,KAAK,CAAC,gCAAgC,CAAEA,KAAK,CAAC,CACtD5C,OAAO,CAACyE,QAAQ,EAAKA,QAAQ,CAAAC,aAAA,CAAAA,aAAA,IAAQD,QAAQ,MAAEE,aAAa,CAAE,CAAC,GAAK,IAAK,CAAC,CAAE;AAC9E,CACF,CAAC,CAAE,CAAClE,cAAc,CAAC,CAAC,CAAE;AAEtB;AACA;AACApB,SAAS,CAAC,IAAM,CACdsD,OAAO,CAACW,GAAG,CAAC,8HAA8H,CAAC,CAC3I,GAAIrD,KAAK,CAAE,CACTmD,eAAe,CAACnD,KAAK,CAAC,CACtB+D,wBAAwB,CAAC/D,KAAK,CAAC,CAC/BuE,kBAAkB,CAACvE,KAAK,CAAC,CAAE;AAC7B,CAAC,IAAM,CACLK,aAAa,CAAC,CAAEC,KAAK,CAAE,EAAE,CAAEC,WAAW,CAAE,CAAE,CAAC,CAAC,CAAE;AAC9CR,OAAO,CAAC,IAAI,CAAC,CAAE;AACjB,CACF,CAAC,CAAE,CAACC,KAAK,CAAEmD,eAAe,CAAEY,wBAAwB,CAAEQ,kBAAkB,CAAC,CAAC,CAAE;AAE5E;AACA,KAAM,CAAAI,KAAK,CAAGA,CAACC,QAAQ,CAAEC,SAAS,GAAK,CACrC9E,OAAO,CAAC6E,QAAQ,CAAC,CACjB3E,QAAQ,CAAC4E,SAAS,CAAC,CACnB1C,YAAY,CAACc,OAAO,CAAC,OAAO,CAAE4B,SAAS,CAAC,CACxC1C,YAAY,CAACc,OAAO,CAAC,MAAM,CAAEV,IAAI,CAACW,SAAS,CAAC0B,QAAQ,CAAC,CAAC,CACtDlC,OAAO,CAACW,GAAG,CAAC,4EAA4E,CAAC,CACzF;AACF,CAAC,CAED;AACA,KAAM,CAAAM,MAAM,CAAGA,CAAA,GAAM,CACnBjB,OAAO,CAACW,GAAG,CAAC,gFAAgF,CAAC,CAC7FtD,OAAO,CAAC,IAAI,CAAC,CACbE,QAAQ,CAAC,IAAI,CAAC,CACdI,aAAa,CAAC,CAAEC,KAAK,CAAE,EAAE,CAAEC,WAAW,CAAE,CAAE,CAAC,CAAC,CAAE;AAC9C4B,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC,CAChCT,YAAY,CAACS,UAAU,CAAC,MAAM,CAAC,CAC/B;AACF,CAAC,CAED;AACA,KAAM,CAAAkC,SAAS,CAAG,cAAAA,CAAOZ,SAAS,CAAwC,IAAtC,CAAAE,QAAQ,CAAAxD,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,IAAE,CAAAmE,cAAc,CAAAnE,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAAC,CACnE,GAAI,CAACsD,SAAS,CAAE,CACdzD,eAAe,CAAC,uDAAuD,CAAC,CACxEiC,OAAO,CAACC,KAAK,CAAC,uDAAuD,CAAC,CACtE,OACF,CAEA,GAAI3C,KAAK,CAAE,CACT;AACA,GAAI,CACF,KAAM,CAAAsD,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAA7B,MAAA,CAAIlB,cAAc,cAAa,CAAE;AAC3DyD,MAAM,CAAE,MAAM,CACdT,OAAO,CAAE,CACP,cAAc,CAAE,kBAAkB,CAClC,eAAe,WAAA9B,MAAA,CAAY1B,KAAK,CAClC,CAAC,CACDmB,IAAI,CAAEoB,IAAI,CAACW,SAAS,CAAC,CAAEgB,SAAS,CAAEE,QAAS,CAAC,CAC9C,CAAC,CAAC,CACF,GAAI,CAACd,QAAQ,CAACG,EAAE,CAAE,CAChB,KAAM,CAAAY,SAAS,CAAG,KAAM,CAAAf,QAAQ,CAACQ,IAAI,CAAC,CAAC,CACvC,KAAM,IAAI,CAAAF,KAAK,CAACS,SAAS,CAAC3D,OAAO,yBAAAgB,MAAA,CAA2B4B,QAAQ,CAACI,MAAM,CAAE,CAAC,CAChF,CACA,KAAM,CAAAsB,WAAW,CAAG,KAAM,CAAA1B,QAAQ,CAACQ,IAAI,CAAC,CAAC,CACzCzD,aAAa,CAAC2E,WAAW,CAAC,CAAE;AAC5B;AACAvE,eAAe,CAAC,wBAAwB,CAAE,IAAM,CAAC,CAAC,CAAE,IAAI,CAAC,CAAE;AAC7D,CAAE,MAAOkC,KAAK,CAAE,CACdD,OAAO,CAACC,KAAK,CAAC,qDAAqD,CAAEA,KAAK,CAAC,CAC3ElC,eAAe,2BAAAiB,MAAA,CAA2BiB,KAAK,CAACjC,OAAO,CAAE,CAAC,CAC5D,CACF,CAAC,IAAM,CACL;AACA,KAAM,CAAAuE,iBAAiB,CAAG/E,SAAS,CAACgF,SAAS,CAAClB,IAAI,EAAIA,IAAI,CAACG,OAAO,GAAKD,SAAS,CAAC,CACjF,GAAI,CAAAiB,gBAAgB,CAEpB,GAAIF,iBAAiB,CAAG,CAAC,CAAC,CAAE,CAC1B;AACAE,gBAAgB,CAAGjF,SAAS,CAACkF,GAAG,CAAC,CAACpB,IAAI,CAAEqB,KAAK,GAC3CA,KAAK,GAAKJ,iBAAiB,CAAAR,aAAA,CAAAA,aAAA,IAAQT,IAAI,MAAEI,QAAQ,CAAEJ,IAAI,CAACI,QAAQ,CAAGA,QAAQ,GAAKJ,IAClF,CAAC,CACH,CAAC,IAAM,CACL;AACA;AACA,GAAI,CAACe,cAAc,CAACT,IAAI,EAAI,CAACS,cAAc,CAACO,KAAK,CAAE,CACjD5C,OAAO,CAACM,IAAI,CAAC,uGAAuG,CAAC,CACrH,GAAI,CACF;AACA,KAAM,CAAAuC,GAAG,CAAG,KAAM,CAAAhC,KAAK,IAAA7B,MAAA,CAAIlB,cAAc,mBAAAkB,MAAA,CAAiBwC,SAAS,CAAE,CAAC,CAAE;AACxE,KAAM,CAAAsB,WAAW,CAAG,KAAM,CAAAD,GAAG,CAACzB,IAAI,CAAC,CAAC,CACpC,GAAIyB,GAAG,CAAC9B,EAAE,CAAE,CACVsB,cAAc,CAAG,CACfT,IAAI,CAAEkB,WAAW,CAAClB,IAAI,CACtBmB,QAAQ,CAAED,WAAW,CAACC,QAAQ,CAC9BH,KAAK,CAAEE,WAAW,CAACF,KACrB,CAAC,CACH,CAAC,IAAM,CACL5C,OAAO,CAACC,KAAK,CAAC,wEAAwE,CAAE6C,WAAW,CAAC9E,OAAO,CAAC,CAC5GqE,cAAc,CAAG,CAAET,IAAI,CAAE,iBAAiB,CAAEmB,QAAQ,CAAE,EAAE,CAAEH,KAAK,CAAE,CAAE,CAAC,CAAE;AACxE,CACF,CAAE,MAAOI,QAAQ,CAAE,CACjBhD,OAAO,CAACC,KAAK,CAAC,uEAAuE,CAAE+C,QAAQ,CAAC,CAChGX,cAAc,CAAG,CAAET,IAAI,CAAE,iBAAiB,CAAEmB,QAAQ,CAAE,EAAE,CAAEH,KAAK,CAAE,CAAE,CAAC,CAAE;AACxE,CACF,CAEAH,gBAAgB,CAAG,CACjB,GAAGjF,SAAS,CACZ,CACEiE,OAAO,CAAED,SAAS,CAAE;AACpBI,IAAI,CAAES,cAAc,CAACT,IAAI,CACzBmB,QAAQ,CAAEV,cAAc,CAACU,QAAQ,CACjCH,KAAK,CAAEP,cAAc,CAACO,KAAK,CAC3BlB,QAAQ,CAAEA,QACZ,CAAC,CACF,CACH,CACAjE,YAAY,CAACgF,gBAAgB,CAAC,CAAE;AAChC;AACA1E,eAAe,CAAC,8BAA8B,CAAE,IAAM,CAAC,CAAC,CAAE,IAAI,CAAC,CAAE;AACnE,CACF,CAAC,CAED;AACA,KAAM,CAAAkF,kBAAkB,CAAG,KAAAA,CAAOzB,SAAS,CAAEE,QAAQ,GAAK,CACxD,GAAIA,QAAQ,CAAG,CAAC,CAAE,CAChB3D,eAAe,CAAC,8BAA8B,CAAC,CAC/C,OACF,CAEA,GAAIT,KAAK,CAAE,CACT;AACA,GAAI,CACF,KAAM,CAAAsD,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAA7B,MAAA,CAAIlB,cAAc,eAAAkB,MAAA,CAAawC,SAAS,EAAI,CAAE;AACxED,MAAM,CAAE,KAAK,CACbT,OAAO,CAAE,CACP,cAAc,CAAE,kBAAkB,CAClC,eAAe,WAAA9B,MAAA,CAAY1B,KAAK,CAClC,CAAC,CACDmB,IAAI,CAAEoB,IAAI,CAACW,SAAS,CAAC,CAAEkB,QAAS,CAAC,CACnC,CAAC,CAAC,CACF,GAAI,CAACd,QAAQ,CAACG,EAAE,CAAE,CAChB,KAAM,CAAAY,SAAS,CAAG,KAAM,CAAAf,QAAQ,CAACQ,IAAI,CAAC,CAAC,CACvC,KAAM,IAAI,CAAAF,KAAK,CAACS,SAAS,CAAC3D,OAAO,yBAAAgB,MAAA,CAA2B4B,QAAQ,CAACI,MAAM,CAAE,CAAC,CAChF,CACA,KAAM,CAAAsB,WAAW,CAAG,KAAM,CAAA1B,QAAQ,CAACQ,IAAI,CAAC,CAAC,CACzCzD,aAAa,CAAC2E,WAAW,CAAC,CAAE;AAC9B,CAAE,MAAOrC,KAAK,CAAE,CACdD,OAAO,CAACC,KAAK,CAAC,sEAAsE,CAAEA,KAAK,CAAC,CAC5FlC,eAAe,+BAAAiB,MAAA,CAA+BiB,KAAK,CAACjC,OAAO,CAAE,CAAC,CAChE,CACF,CAAC,IAAM,CACL;AACA,KAAM,CAAAyE,gBAAgB,CAAGjF,SAAS,CAACkF,GAAG,CAACpB,IAAI,EACzCA,IAAI,CAACG,OAAO,GAAKD,SAAS,CAAAO,aAAA,CAAAA,aAAA,IAAQT,IAAI,MAAEI,QAAQ,CAAEA,QAAQ,GAAKJ,IACjE,CAAC,CAAC4B,MAAM,CAAC5B,IAAI,EAAIA,IAAI,CAACI,QAAQ,CAAG,CAAC,CAAC,CAAE;AAErCjE,YAAY,CAACgF,gBAAgB,CAAC,CAAE;AAClC,CACF,CAAC,CAED;AACA,KAAM,CAAAU,cAAc,CAAG,KAAO,CAAA3B,SAAS,EAAK,CAC1C,GAAIlE,KAAK,CAAE,CACT;AACA,GAAI,CACF,KAAM,CAAAsD,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAA7B,MAAA,CAAIlB,cAAc,eAAAkB,MAAA,CAAawC,SAAS,EAAI,CAAE;AACxED,MAAM,CAAE,QAAQ,CAChBT,OAAO,CAAE,CACP,eAAe,WAAA9B,MAAA,CAAY1B,KAAK,CAClC,CACF,CAAC,CAAC,CACF,GAAI,CAACsD,QAAQ,CAACG,EAAE,CAAE,CAChB,KAAM,CAAAY,SAAS,CAAG,KAAM,CAAAf,QAAQ,CAACQ,IAAI,CAAC,CAAC,CACvC,KAAM,IAAI,CAAAF,KAAK,CAACS,SAAS,CAAC3D,OAAO,yBAAAgB,MAAA,CAA2B4B,QAAQ,CAACI,MAAM,CAAE,CAAC,CAChF,CACA,KAAM,CAAAsB,WAAW,CAAG,KAAM,CAAA1B,QAAQ,CAACQ,IAAI,CAAC,CAAC,CACzCzD,aAAa,CAAC2E,WAAW,CAAC,CAAE;AAC5BvE,eAAe,CAAC,4BAA4B,CAAC,CAAE;AACjD,CAAE,MAAOkC,KAAK,CAAE,CACdD,OAAO,CAACC,KAAK,CAAC,8DAA8D,CAAEA,KAAK,CAAC,CACpFlC,eAAe,gCAAAiB,MAAA,CAAgCiB,KAAK,CAACjC,OAAO,CAAE,CAAC,CACjE,CACF,CAAC,IAAM,CACL;AACA,KAAM,CAAAyE,gBAAgB,CAAGjF,SAAS,CAAC0F,MAAM,CAAC5B,IAAI,EAAIA,IAAI,CAACG,OAAO,GAAKD,SAAS,CAAC,CAC7E/D,YAAY,CAACgF,gBAAgB,CAAC,CAAE;AAChC1E,eAAe,CAAC,kCAAkC,CAAC,CAAE;AACvD,CACF,CAAC,CAED;AACA,KAAM,CAAAqF,SAAS,CAAG,KAAAA,CAAA,GAAY,CAC5B,GAAI9F,KAAK,CAAE,CACT;AACA,GAAI,CACF,KAAM,CAAAsD,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAA7B,MAAA,CAAIlB,cAAc,cAAa,CAAE;AAC3DyD,MAAM,CAAE,QAAQ,CAChBT,OAAO,CAAE,CACP,eAAe,WAAA9B,MAAA,CAAY1B,KAAK,CAClC,CACF,CAAC,CAAC,CACF,GAAI,CAACsD,QAAQ,CAACG,EAAE,CAAE,CAChB,KAAM,CAAAY,SAAS,CAAG,KAAM,CAAAf,QAAQ,CAACQ,IAAI,CAAC,CAAC,CACvC,KAAM,IAAI,CAAAF,KAAK,CAACS,SAAS,CAAC3D,OAAO,yBAAAgB,MAAA,CAA2B4B,QAAQ,CAACI,MAAM,CAAE,CAAC,CAChF,CACA,KAAM,CAAAqC,WAAW,CAAG,KAAM,CAAAzC,QAAQ,CAACQ,IAAI,CAAC,CAAC,CACzCzD,aAAa,CAAC0F,WAAW,CAAC,CAAE;AAC5BtF,eAAe,CAAC,4BAA4B,CAAC,CAAE;AACjD,CAAE,MAAOkC,KAAK,CAAE,CACdD,OAAO,CAACC,KAAK,CAAC,oDAAoD,CAAEA,KAAK,CAAC,CAC1ElC,eAAe,0BAAAiB,MAAA,CAA0BiB,KAAK,CAACjC,OAAO,CAAE,CAAC,CAC3D,CACF,CAAC,IAAM,CACL;AACAP,YAAY,CAAC,EAAE,CAAC,CAAE;AAClBM,eAAe,CAAC,kCAAkC,CAAC,CAAE;AACvD,CACF,CAAC,CAED;AACA,KAAM,CAAAuF,kBAAkB,CAAGhG,KAAK,CAAGI,UAAU,CAAG,CAC9CE,KAAK,CAAEJ,SAAS,CAChB;AACAK,WAAW,CAAEL,SAAS,CAAC+F,MAAM,CAAC,CAACC,GAAG,CAAElC,IAAI,GAAKkC,GAAG,CAAIlC,IAAI,CAACsB,KAAK,CAAGtB,IAAI,CAACI,QAAS,CAAE,CAAC,CACpF,CAAC,CAED;AACA,KAAM,CAAA+B,gBAAgB,CAAG,CACvBrG,IAAI,CAAc;AAClBE,KAAK,CAAa;AAClB2E,KAAK,CAAa;AAClBhB,MAAM,CAAY;AAClByC,IAAI,CAAEJ,kBAAkB,CAAE;AAC1BlB,SAAS,CAAS;AAClBa,kBAAkB,CAAE;AACpBE,cAAc,CAAI;AAClBC,SAAS,CAAS;AAClB3C,eAAe,CAAG;AAClB1C,eAAe,CAAG;AAClB8D,kBAAmB;AACrB,CAAC,CAED,oBACE;AACA9E,IAAA,CAACC,WAAW,CAAC2G,QAAQ,EAACC,KAAK,CAAEH,gBAAiB,CAAAtG,QAAA,CAC3CA,QAAQ,CACW,CAAC,EAE3B,CAEA;AACA,MAAO,MAAM,CAAA0G,OAAO,CAAGA,CAAA,GAAM,CAC3B,KAAM,CAAAC,OAAO,CAAGjH,UAAU,CAACG,WAAW,CAAC,CACvC;AACA,GAAI8G,OAAO,GAAK1F,SAAS,CAAE,CACzB,KAAM,IAAI,CAAA8C,KAAK,CAAC,6CAA6C,CAAC,CAChE,CACA,MAAO,CAAA4C,OAAO,CAAE;AAClB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}